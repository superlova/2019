<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Superlova</title>
  
  <subtitle>Welcome...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://superlova.github.io/"/>
  <updated>2021-04-24T16:30:32.167Z</updated>
  <id>https://superlova.github.io/</id>
  
  <author>
    <name>Superlova</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【学习笔记】Docker综合实践</title>
    <link href="https://superlova.github.io/2021/04/24/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Docker%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/"/>
    <id>https://superlova.github.io/2021/04/24/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Docker%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-04-24T14:16:40.000Z</published>
    <updated>2021-04-24T16:30:32.167Z</updated>
    
    <content type="html"><![CDATA[<p>Datawhale Docker学习笔记第六篇<br><a id="more"></a></p><p>在没有学习docker之前，部署项目都是直接启动文件，比如java项目就是java –jar xxxx.jar的方式，python项目就是python xxxx.py。如果采用docker的方式去部署这些项目，一般有两种方式，以jar包项目为例</p><h1 id="方式一、挂载部署"><a href="#方式一、挂载部署" class="headerlink" title="方式一、挂载部署"></a>方式一、挂载部署</h1><p>这种方式类似于常规部署，通过数据卷的方式将宿主机的jar包挂载到容器中，然后执行jar包的jdk选择容器中的而非采用本地的。</p><ol><li>将jar包上传到服务器的指定目录，比如/root/docker/jar。</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp9yobtp2tj30o007njt5.jpg" srcset="/img/loading.gif" alt></p><ol><li>通过docker pull openjdk:8命令获取镜像</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp9yord00xj30o006bju3.jpg" srcset="/img/loading.gif" alt></p><ol><li>编写docker-compose.yml文件</li></ol><pre><code class="lang-yaml">version:&#39;3.0&#39;services:  java:    image: docker.io/openjdk    restart:always    container_name: myopenjdk    ports:      - 8080:8001    volumes:      - /root/docker/jar/xxxx.jar:/root:z      - /etc/localtime:/etc/localtime    environment:      - TZ=&quot;Asia/Shanghai&quot;    entrypoint: java -jar /root/xxxx.jar    mynetwork:      ipv4_address: 192.168.1.13networks:  mynetwork:   ipam:     config:      - subnet: 192.168.1.0/24</code></pre><p>参数解释：</p><ul><li><p>build 指定dockerfile所在文件夹的路径 context指定dockerfile文件所在路径 dockerfile指定文件的具体名称</p></li><li><p>container_name 指定容器名称</p></li><li><p>volumes 挂载路径  z是用来设置selinux，或者直接在linux通过命令临时关闭或者永久关闭</p></li><li><p>ports 暴露端口信息</p></li><li><p>networks是用来给容器设置固定的ip</p></li></ul><ol><li>执行命令docker-compose up –d启动jar包, 可以通过docker ps查看容器是否在运行，需要注意的是默认查看所有运行中的容器，如果想查看所有容器，需要添加参数-a</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp9yp7mo2wj30o0057aay.jpg" srcset="/img/loading.gif" alt></p><ol><li><p>注意如果容器启动失败或者状态异常，可以通过docker logs查看日志</p></li><li><p>通过docker inspect myopenjdk查看容器详细信息，可以看到容器ip已经设置成功</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp9ypl8wgdj30o009wabq.jpg" srcset="/img/loading.gif" alt></p><ol><li>然后在虚拟机中打开浏览器输入jar包项目的访问地址，就可以看到运行的项目，需要注意访问端口是映射过的端口而非项目实际端口</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp9yq1vynoj30o00dytaj.jpg" srcset="/img/loading.gif" alt></p><h2 id="方式二、构建镜像部署"><a href="#方式二、构建镜像部署" class="headerlink" title="方式二、构建镜像部署"></a>方式二、构建镜像部署</h2><ol><li><p>将jar包上传到服务器的指定目录，比如/root/docker/jar。</p></li><li><p>在该目录下创建Dockerfile文件，通过vim等编辑工具在Dockerfile中编辑以下内容</p></li></ol><pre><code class="lang-dockerfile">FROM java:8MAINTAINER YHFLABEL description=”learn docker”ADD xxx.jarEXPOSE 8001ENTRYPOINT [“java”,”-jar”,”xxxx.jar”]</code></pre><p>参数解释：</p><ul><li><p>FROM java:8 指定所创建镜像的基础镜像</p></li><li><p>MAINTAINER yhf 指定作者为yhf</p></li><li><p>LABEL 为生成的镜像添加元数据标签信息</p></li><li><p>ADD xxxx.jar 添加内容到镜像</p></li><li><p>EXPOSE 8080 声明镜像内服务监听的端口</p></li><li><p>ENTRYPOINT 指定镜像的默认入口命令，支持两种格式ENTRYPOINT[“java”,”-jar”,”xxxx.jar”]；ENTRYPOINT java –jar xxxx.jar。注意每个dokcerfile中只能有一个ENTRYPOINT，如果指定多个只有最后一个生效。</p></li></ul><ol><li><p>Dockerfile构建完成以后可以通过命令docker build构建镜像，然后再运行容器，这里咱们用docker-compose命令直接编排构建镜像和运行容器。</p></li><li><p>编写docker-compose.yml文件</p><p>```yaml<br>version: ‘3’</p></li></ol><p>services:</p><p>  java_2:<br>    restart: always<br>    image: yhfopenjdk:latest<br>    container_name: myopenjdk<br>    ports:</p><pre><code>  - 8080:8001volumes:  - /etc/localtime:/etc/localtimeenvironment:  - TZ=&quot;Asia/Shanghai&quot;entrypoint: java -jar /root/datawhale-admin-1.0.0.jarnetworks:  mynetwork:     ipv4_address: 192.168.1.13</code></pre><p>networks:<br>  mynetwork:<br>   ipam:<br>     config:</p><pre><code>  - subnet: 192.168.1.0/24</code></pre><p> ```</p><p>参数解释同方式一：</p><ol><li>执行docker-compose up –d直接启动基于文件构建的自定义镜像，如果镜像不存在会自动构建，如果已存在那么直接启动。如果想重新构建镜像，则执行docker-compose build。如果想在执行compose文件的时候重构，则执行docker-compose up –d –build。</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp9yqi1lv0j30o007ign6.jpg" srcset="/img/loading.gif" alt></p><p>此使通过dockerfile文件构建的镜像已经创建</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp9yqxa7t1j30o005qdi5.jpg" srcset="/img/loading.gif" alt></p><p>通过镜像运行的容器已经正常启动，可以通过docker ps查看容器是否在运行，需要注意的是默认查看所有运行中的容器，如果想查看所有容器，需要添加参数-a</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp9yra1jg1j30o0013q33.jpg" srcset="/img/loading.gif" alt></p><ol><li>在浏览器中输入访问路径可以看到项目已经正常运行</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gp9yrmnnzzj30o00d975v.jpg" srcset="/img/loading.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Datawhale Docker学习笔记第六篇&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Docker" scheme="https://superlova.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【学习笔记】Docker Compose</title>
    <link href="https://superlova.github.io/2021/04/21/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Docker-Compose/"/>
    <id>https://superlova.github.io/2021/04/21/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Docker-Compose/</id>
    <published>2021-04-21T15:50:20.000Z</published>
    <updated>2021-04-21T16:02:36.263Z</updated>
    
    <content type="html"><![CDATA[<p>Datawhale Docker学习笔记第五篇<br><a id="more"></a></p><h1 id="什么是docker-compose"><a href="#什么是docker-compose" class="headerlink" title="什么是docker compose"></a>什么是docker compose</h1><p>要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等，这些需要多个容器相互配合来完成。</p><p>Docker Compose 允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p>下面是一个 docker-compose.yml 示例：</p><p><img src="/2021/04/21/【学习笔记】Docker-Compose/2021-04-21-23-54-09.png" srcset="/img/loading.gif" alt></p><p>里面多了image、ports、networks等标签。</p><h1 id="如何使用docker-compose"><a href="#如何使用docker-compose" class="headerlink" title="如何使用docker compose"></a>如何使用docker compose</h1><p>在Compose 中有两个重要的概念：</p><p><strong>服务 (service)</strong>：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</p><p><strong>项目 (project)</strong>：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。</p><p>Compose的默认管理对象是<strong>项目</strong>，也就是通过docker-compose.yml定义的一组服务集合，通过一些命令来对项目中的一组容器进行便捷地生命周期管理。</p><p>下面我们来看一个真实的场景，在该场景下我们是通过Python来写一个能够记录页面访问次数的 web 网站。</p><h2 id="web-应用示例"><a href="#web-应用示例" class="headerlink" title="web 应用示例"></a>web 应用示例</h2><p><strong>app.py</strong></p><pre><code class="lang-py">from flask import Flaskfrom redis import Redisimport osimport socketapp = Flask(__name__)redis = Redis(host=os.environ.get(&#39;REDIS_HOST&#39;, &#39;127.0.0.1&#39;), port=6379)@app.route(&#39;/&#39;)def hello():    redis.incr(&#39;hits&#39;)    return &#39;Hello Container World! I have been seen %s times and my hostname is %s.\n&#39; % (redis.get(&#39;hits&#39;),socket.gethostname())if __name__ == &quot;__main__&quot;:    app.run(host=&quot;0.0.0.0&quot;, port=5000, debug=True)</code></pre><p><strong>Dockerfile</strong></p><pre><code class="lang-docker">FROM python:2.7COPY . /appWORKDIR /appRUN pip install flask redisEXPOSE 5000CMD [ &quot;python&quot;, &quot;app.py&quot; ]</code></pre><p><strong>docker-compose.yml</strong></p><pre><code class="lang-yaml">version: &quot;3&quot;services:  redis:    image: redis  web:    build:      context: .      dockerfile: Dockerfile    ports:      - &quot;5000:5000&quot;    environment:      REDIS_HOST: redis</code></pre><p><strong>运行 compose 项目</strong></p><p><code>$ docker-compose up -d</code></p><p>此时访问本地 5000 端口<a href="http://localhost:5000，每次刷新页面，计数就会加" target="_blank" rel="noopener">http://localhost:5000，每次刷新页面，计数就会加</a> 1。</p><h1 id="docker-compose基本使用"><a href="#docker-compose基本使用" class="headerlink" title="docker compose基本使用"></a>docker compose基本使用</h1><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>在创建好docker-compose.yml文件后，可以通过下面这个命令将文件中定义的容器都启动起来，在docker compose中我们更习惯于将每一个容器叫做service。</p><pre><code>docker-compose up</code></pre><p>命令后会自动接一个默认值-f docker-compose.yml，也就是默认是使用docker-compose.yml文件的。我们也可以给文件起名为docke-test.yml，这样在使用时指定文件名，但是为了符合规范，还是统一为docker-compose.yml。</p><pre><code>docker-compose up -f docer-test.yml</code></pre><p>但是直接通过这种方式的话会直接将启动时的输出打印到终端，所以我们常会加上-d参数。</p><pre><code>docker-compose up -d</code></pre><h2 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h2><p>接下来可以查看一下我们创建的service状态</p><pre><code>docker-compose ps</code></pre><p>要是想要查看所有service的状态可以使用-a参数：</p><pre><code>docker-compose ps -a</code></pre><h2 id="停止或删除服务"><a href="#停止或删除服务" class="headerlink" title="停止或删除服务"></a>停止或删除服务</h2><p>如何停止已经运行的services呢，可以使用以下两个命令</p><pre><code>docker-compose stopdocker-compose down</code></pre><p>其中stop是直接停止services，而down则会停止并删除创建的service，volume和network。</p><h2 id="进入服务"><a href="#进入服务" class="headerlink" title="进入服务"></a>进入服务</h2><p>有些情况下我们还需要进入容器来执行一些命令，可以通过如下方式进入容器</p><pre><code>docker-compose exec mysql bash</code></pre><p>exec后面接的就是我们要进入具体的service的名字，名字后面就是我们要执行的命令。</p><h2 id="查看服务输出日志"><a href="#查看服务输出日志" class="headerlink" title="查看服务输出日志"></a>查看服务输出日志</h2><p>有些情况下一些服务可能无法正常启动，这时可以使用命令查看日志并定位发生错误的原因</p><pre><code>docker-compose logs</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Datawhale Docker学习笔记第五篇&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Docker" scheme="https://superlova.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>央行工作论文读后感</title>
    <link href="https://superlova.github.io/2021/04/21/%E5%A4%AE%E8%A1%8C%E5%B7%A5%E4%BD%9C%E8%AE%BA%E6%96%87%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>https://superlova.github.io/2021/04/21/%E5%A4%AE%E8%A1%8C%E5%B7%A5%E4%BD%9C%E8%AE%BA%E6%96%87%E8%AF%BB%E5%90%8E%E6%84%9F/</id>
    <published>2021-04-21T03:35:45.000Z</published>
    <updated>2021-04-24T09:59:18.905Z</updated>
    
    <content type="html"><![CDATA[<p>央行（中国人民银行）在2021年3月26日发表了一篇工作论文《关于我国人口转型的认识和应对之策》。论文一经发表便引起了全网的大讨论，新浪微博上的相关点击量达到3.2亿次。然而网络上的消息难免囿于其碎片话叙事风格，使人产生偏见。因此笔者抱着批判性学习的心态，拜读了该篇论文，并试图梳理主要内容，最后就相关观点提出自己的评论。<br><a id="more"></a></p><p>声明：本文并非学术文章，而是代表个人见解的社会评论；针对的也仅限于该篇文章，而不能涵盖文章所涉及的所有相关议题。本文写作目的仅出于学习和交流。本文作者并非研究人口与社会问题的专业人士，因此观点未免存在疏漏和幼稚之处，望读者海涵。</p><p>这篇工作论文的四名作者均是中国人民银行下属研究机构的经济学博士。作者还向当局提出放开计划生育、控制房价、重视储蓄和投资等建议。</p><p>所有的中国人民银行工作论文可在如下网站查看：<br><a href="http://www.pbc.gov.cn/yanjiuju/124427/133100/index.html" target="_blank" rel="noopener">http://www.pbc.gov.cn/yanjiuju/124427/133100/index.html</a></p><h1 id="论文原文内容摘录"><a href="#论文原文内容摘录" class="headerlink" title="论文原文内容摘录"></a>论文原文内容摘录</h1><p>以下将《关于我国人口转型的认识和应对之策》简称为“论文”。灰色引用部分和图表为原文内容，其余部分为本人评注。</p><h2 id="一、人口转型的规律"><a href="#一、人口转型的规律" class="headerlink" title="一、人口转型的规律"></a>一、人口转型的规律</h2><p>该部分讨论了经济社会发展和出生率与死亡率的关系问题。</p><blockquote><p>经济社会的发展将导致出生率和死亡率下降，但是死亡率会先于出生率下降，因此论文将人口增长状态分为四个阶段：低增长（I）、加速增长（II）、增长减缓（III）和恢复低增长（IV）。</p></blockquote><p><img src="/2021/04/21/央行工作论文读后感/2021-04-21-12-02-48.png" srcset="/img/loading.gif" alt></p><blockquote><p>发达经济体已经位于IV阶段，而大多数发展中经济体位于II或III阶段。</p></blockquote><p>什么是人口红利？人口红利是指生育率下降带来的劳动人口占比提升的现象。在人口红利时期，因为抚养子女和老人的压力变小，更多的人口能够从事经济发展有关的工作，因此这个地区相较于其他地区增长快。具体表现为居民储蓄率高、投资高等。</p><p>人口红利是一个地区发展的机会，但是能否利用这个机会，则有赖于社会和政治条件所创造的生产性就业和投资环境。</p><p>劳动适龄人口占多数的时期是短暂的（约50年），这一部分劳动人口终究会老去并成为负担，届时新一代人将成为社会发展的主力。这种人口红利之后的现象称之为人口转型。</p><p>什么是中等收入陷阱？经济水平长期处于中等收入水平的国家，经济社会发展长期停滞在该水平，受限于各种因素而无法跻身富裕国家行列，看起来好像陷入了一个“陷阱”之中。与“中等收入陷阱”类似的概念还有“贫困陷阱”。</p><h2 id="二、国外应对人口转型的经验和教训"><a href="#二、国外应对人口转型的经验和教训" class="headerlink" title="二、国外应对人口转型的经验和教训"></a>二、国外应对人口转型的经验和教训</h2><p>发达经济体早在工业革命时期就已经积累了一定的人口转型方面的经验和教训。具体表现在：</p><blockquote><p>教训：</p><ul><li>没料到会出现人口转型；</li><li>低估了人口对经济增长的作用；</li><li>低估了老龄化和少子化的危害。</li></ul></blockquote><p>前两点不言自明。而对于第三点，论文认为体现在：</p><blockquote><p>1）发达国家其一高估了教育和科技的作用；2）高估了鼓励生育的效果；3）高估了养老保障政策和养老产业的作用。</p><p>经验：</p><ul><li>资本扩张</li><li>移民</li></ul></blockquote><p>论文提到了这两点是十分行之有效的做法。但这就意味着要求国家发展到国际产业链的顶端，要“当大哥”才能获得这份利益。</p><h2 id="三、我们该如何应对人口转型？"><a href="#三、我们该如何应对人口转型？" class="headerlink" title="三、我们该如何应对人口转型？"></a>三、我们该如何应对人口转型？</h2><h3 id="3-1-目前问题很严峻"><a href="#3-1-目前问题很严峻" class="headerlink" title="3.1 目前问题很严峻"></a>3.1 目前问题很严峻</h3><p>论文指出，一方面我们同样面临人口红利即将结束的人口转型问题，</p><p><img src="/2021/04/21/央行工作论文读后感/2021-04-22-08-42-49.png" srcset="/img/loading.gif" alt></p><p>另一方面我们的问题比发达国家更为严重，我们“未富先老”；而且由于计划生育政策，我们的生育率下降得更快。在可以预见的将来，经济发展停滞，甚至是物价疲软、资产价格通缩、高负债等现象都可能出现。</p><p>选取美国和印度两个典型的国家进行比较，美国由于技术移民和资本扩张，人口结构问题并不是很突出。而印度正处于人口红利初期，具体可看下图：</p><p><img src="/2021/04/21/央行工作论文读后感/2019年中印美人口结构比较图.png" srcset="/img/loading.gif" alt></p><p>预计2050年，中印美三国的人口结构如下图所示：</p><p><img src="/2021/04/21/央行工作论文读后感/2050年预计中印美人口结构比较图.png" srcset="/img/loading.gif" alt></p><blockquote><p>如果说过去四十年我国缩小与美国的差距，靠的是廉价的劳动力和巨大的人口红利，那未来三十年要靠什么？这值得我们深思。</p></blockquote><h3 id="3-2-应对方案"><a href="#3-2-应对方案" class="headerlink" title="3.2 应对方案"></a>3.2 应对方案</h3><blockquote><p>用调控经济的思路去应对人口转型，多半事与愿违。所以一定要有提前量，并且搞得多多的，这样才不至于积重难返；一定要坚持，这样才有成效。</p><h4 id="3-2-1-全面放开生育。"><a href="#3-2-1-全面放开生育。" class="headerlink" title="3.2.1 全面放开生育。"></a>3.2.1 全面放开生育。</h4></blockquote><p>这应当是解决人口结构问题的大前提。</p><blockquote><h4 id="3-2-2-重视储蓄。"><a href="#3-2-2-重视储蓄。" class="headerlink" title="3.2.2 重视储蓄。"></a>3.2.2 重视储蓄。</h4></blockquote><p>老龄化会导致储蓄率下降。未雨绸缪不仅适用于个人，而且对于国家而言同样重要。从其仅次于第一点就能看出，储蓄率对解决人口结构问题至关重要。事实上储蓄率是国家和政府主导投资的核心，是经济发展的直接动力源之一。</p><blockquote><h4 id="3-2-3-重视投资。"><a href="#3-2-3-重视投资。" class="headerlink" title="3.2.3 重视投资。"></a>3.2.3 重视投资。</h4></blockquote><p>重视对我国中西部的投资、对亚非拉地区的投资，以及对科技的投资。</p><blockquote><h4 id="3-2-4-推进养老制度从即时支付型向储蓄型转移。"><a href="#3-2-4-推进养老制度从即时支付型向储蓄型转移。" class="headerlink" title="3.2.4 推进养老制度从即时支付型向储蓄型转移。"></a>3.2.4 推进养老制度从即时支付型向储蓄型转移。</h4></blockquote><p>我国的养老保险制度由三大支柱组成。第一支柱是基本养老保险，即人们常说的养老金；第二支柱即企业年金和职业年金；第三支柱包括个人储蓄性养老保险和商业养老保险。第三支柱以个人主导，工作时有一部分钱税前缴纳，退休取的时候再征税。</p><blockquote><p>削弱第一支柱的养老金，增强个人储蓄保险和商保的占比。这两者最大的区别，就是前者是政府兜底，而后者是市场化产品，政府不会补贴。</p></blockquote><p><a href="https://www.163.com/dy/article/G55MIAN2053907LI.html" target="_blank" rel="noopener">个人储蓄养老保险制度</a>参考这个网站。</p><p>不仅如此，论文还提到应该早点降低养老金、延长退休年龄，越早改革越好。用通俗的话来说，就是“别指望政府给你养老”。</p><blockquote><p>我国延迟退休可早做的一个原因在于，<strong>我国有社会主义的优越性，集体主义精神更强有利于避免发达国家延迟退休中的社会动荡；老一辈的人更能忍让、更能吃苦。</strong></p></blockquote><p>这一点经不起推敲，而且越读越让人感觉味道不对。</p><p>很喜欢王小波的一句话：“声称‘东方和西方的思考方式不一样’的人，其目的都是在掩饰一些自己也觉得不体面的事情。都是同一个物种，怎么会思想方式不同呢？”</p><p>而且，总不能因为班里同学好欺负，就挑软柿子捏，还说这是“软柿子的思想境界高”吧。</p><p>制定政策如果真的是为人民服务的，就应该接收人民群众的监督、承受一部分人的意见，并耐心回复和解答，这才是人民民主专政。</p><p>综上，笔者认为这一点不如不说。</p><blockquote><h4 id="3-2-5-促进教育和科技进步。"><a href="#3-2-5-促进教育和科技进步。" class="headerlink" title="3.2.5 促进教育和科技进步。"></a>3.2.5 促进教育和科技进步。</h4><p>给创新以兜底的社保；把握创新与监管的平衡；控房价；重视母亲和少儿的教育；重视基础教育；重视理工科教育，<strong>东南亚国家掉入中等收入陷阱原因之一是文科生太多</strong>；</p></blockquote><p><img src="/2021/04/21/央行工作论文读后感/控房价原文.png" srcset="/img/loading.gif" alt></p><p>笔者非常赞成关于控房价相关的论述。不仅如此，笔者认为控制房价还有助于提升居民储蓄率，进一步提升经济发展水平。</p><p>文科与理科的大讨论，不是一两句话能说明白的。简单讲，在没有明确“文科”和“理科”的定义之前，擅自对文理进行评价，是不妥当的。</p><p>当然，单纯以毕业生就业情况来看，以自动化、电子、机械、计算机等专业为首的理工科专业的确要比以语言、传媒、艺术等专业要方便就业。</p><p>但是就社会贡献来看，文科尤其是社会科学对社会的贡献要不亚于理工科学。毕竟我们国家的国策就是在马克思主义的指导下建立的。因此在概念模糊的时候不宜“捧一踩一”。</p><blockquote><p>老话讲，<strong>爹戳戳一个，娘戳戳一窝</strong>，所以教育好母亲比教育其他人事半功倍。事实上，教育母亲不是一句空话，可以从很多具体的小工作做起。比如，有发达国家就给每个育龄妇女分发孕前、孕中、孕后、育儿知识的小册子（政府组织专家编写，简单易懂，免费提供），而不是让大家去市场上买厚厚的、良莠不齐的、五花八门的生育指南。这样花钱不多，又成效显著。</p></blockquote><p>出自俗语“兵熊熊一个,将熊熊一窝”。</p><p>重视对母亲的教育，其实还是囿于传统文化的固有成见，即女性应该承担更多哺育孩子的任务。</p><p>如若从制度角度平衡两性之间的家庭职责，并令政府承担一部分新生儿抚养职能，比如给男性以产假、设立新生儿的政府统一抚养等，比单纯教育母亲要人性化得多。</p><blockquote><p>教育和科技进步周期长、见效慢、不可控，因此我国当前还是要以人、财、物的储蓄为本，教育和科技为辅。</p><p>不一定要建那么多学校、养那么多老师，可以用互联网技术让优质教育资源共享。</p></blockquote><p>这一点确实值得提倡。因为中国东西部教育资源分配不均现象，可以被互联网技术轻易解决。给贫困山区孩子配备一块显示器，然后去北京四中网校下载相应视频，孩子就能享受一流名师的教育教学了。</p><p>然而教育资源可不仅仅是课堂资源，生理指导、心理干预、学习习惯的形成等都需要老师手把手地进行指导。</p><p>今后老师的职能也许会从单纯的课堂教学，逐渐转化为学习、生活等方面的导师，引导学生们的发展。</p><p>这里减少老师和学校数目的倡议，应当是为了应对今后一段时间内新生儿数目减少所导致的需求降低。互联网技术的发展与老师数目的需求之间并无直接关系。</p><h1 id="简评"><a href="#简评" class="headerlink" title="简评"></a>简评</h1><h2 id="1-文笔"><a href="#1-文笔" class="headerlink" title="1. 文笔"></a>1. 文笔</h2><p>从行文上来看，本片工作论文与其说是一篇论文，不如说是一篇由央行背书的社会评论。从其观点的严谨程度到行文的文笔上都不够“学术”，更加口语化。</p><p>例如在第三章第二小节中的一段关于人口与经济的关系的论述如下所示：</p><ul><li>人口与经济的关系<strong>似乎有点像</strong>物价。过快增长不好，萎缩更糟糕，<strong>也许就像</strong>温和的通胀一样，适度、可持续的人口增长才有利于经济社会发展。</li></ul><p>再比如论文第14页的脚注中，关于日本“失去的二十年”的相关注解：</p><ul><li><strong>有人说</strong>，日本失去的二十年的主要原因是日本泡沫经济，而非人口老龄化。……（即便是上世纪三十年代的大萧条，持续时间即使算满，<strong>也就</strong>十年）。<strong>还有人说</strong>，……。 </li></ul><p>并且“有人说”之后也没有跟随参考文献，不由得让人怀疑该“人”的存在性。如此种种不一而足。</p><h2 id="2-储蓄率如何提升？"><a href="#2-储蓄率如何提升？" class="headerlink" title="2. 储蓄率如何提升？"></a>2. 储蓄率如何提升？</h2><p>本节参考自<a href="https://zhuanlan.zhihu.com/p/95800733" target="_blank" rel="noopener">《居民储蓄率与经济的关系》</a>一文。</p><p>论文中提到要“高度警惕和防止储蓄率过快下降的趋势”，并列举了一组数字：我国国民储蓄率从 2010 年的 47.8%，下降到 2018 年的 44.4%，8 年下降了 3.4 个百分点，其中居民储蓄率降幅更大，下降 7.3 个百分点。</p><p>储蓄率下降过快，会使得人口红利期积累下来的财富得不到保存。</p><p>虽然论文在解决方案的第二点就提到了“提升储蓄率”作为解决老龄化问题的方案，但是既没有讨论储蓄率下降的原因，也没有讨论储蓄率如何提升。</p><p>本节将讨论三个问题：</p><ol><li>储蓄率是什么？对经济发展重要吗？</li><li>储蓄率的影响因素有哪些？</li><li>既然储蓄率对国家如此重要，如何提升储蓄率？</li></ol><h3 id="2-1-居民储蓄率和经济之间的关系"><a href="#2-1-居民储蓄率和经济之间的关系" class="headerlink" title="2.1 居民储蓄率和经济之间的关系"></a>2.1 居民储蓄率和经济之间的关系</h3><p>首先需要明确，经济增长的三驾马车是消费、净出口和投资，其中投资依赖于本国储蓄率和外债。</p><p>储蓄率是指用于最终消费后的余额占所有可支配收入的比率。我国的国民储蓄中，居民储蓄是主要部分。</p><p>改革开放以来，中国经济的发展一直依赖于政府主导的大规模投资和大量出口。投资的钱怎么来？银行，银行的钱来自哪里？居民的高储蓄率。</p><p>说白了，你在银行里的存款越多，对政府的投资贡献越大。说不定高铁的一块铁轨、一个地铁站就用了你的一部分存款。</p><p>因此中国的投资大部分依赖于居民储蓄率，储蓄率的下降对经济发展有较大负面影响。</p><h3 id="2-2-老龄化和居民储蓄率之间的关系"><a href="#2-2-老龄化和居民储蓄率之间的关系" class="headerlink" title="2.2 老龄化和居民储蓄率之间的关系"></a>2.2 老龄化和居民储蓄率之间的关系</h3><p>储蓄率和人口结构是有关系的，只不过关系不那么明显。</p><p>人的一生中，消费和储蓄模式会发生变化。</p><p>一个人从事劳动的年份，他们的收入大于消费，由此产生的盈余用于抚养子女以及存入银行。</p><p>而老年人一般将其收入的大部分花在住房和社会服务方面，另外保健和长期护理方面的需求可能会上升，娱乐、交通运输方面的需求可能会下降。</p><p>因此，理论上，当社会中有收入的青壮年逐步减少、没有收入的老人越来越多时，居民的储蓄率就会下降。</p><p>不过储蓄率往往受其他因素影响，因此老龄化与居民储蓄率之间的关系并不是绝对相关的。</p><h3 id="2-3-影响居民储蓄率的其他原因"><a href="#2-3-影响居民储蓄率的其他原因" class="headerlink" title="2.3 影响居民储蓄率的其他原因"></a>2.3 影响居民储蓄率的其他原因</h3><p>虽然老龄化会对居民储蓄率产生一定程度的影响，但还有很多其他因素影响人们的储蓄行为，比如：</p><ul><li>收入水平、资产价值和分配情况</li><li>对未来发展的估计</li><li>税率</li><li>现行养恤金制度</li><li>老年医疗和临终关怀等</li></ul><p>其中居民存款的增长与否与居民收入有很大关系。当经济向好时，居民收入有大幅增长，存款就增大；当经济下行时，居民收入增长较缓，存款增长就放缓。</p><p>既然老龄化和居民收入等原因都会影响居民储蓄率，那么究竟什么是中国居民储蓄率快速下降的主要原因？</p><h3 id="2-4-储蓄率降低的主要原因"><a href="#2-4-储蓄率降低的主要原因" class="headerlink" title="2.4 储蓄率降低的主要原因"></a>2.4 储蓄率降低的主要原因</h3><blockquote><p>“房价太高，再怎么放开生育我都不会生的。”</p></blockquote><p>由于近年教育、医疗、房产等的价格的上升，居民在以上几项当中的消费额增加，致使居民储蓄率下降。特别是房地产在家庭资产配置当中占有非常大的比例，已经大大超过了存款。</p><p>据央行一季度金融统计数据新闻发布会消息，2020年居民杠杆率为 45.7% ，比2019年上升了 7.1% 。</p><p><a href="http://finance.sina.com.cn/zl/china/2021-04-18/zl-ikmxzfmk7496559.shtml" target="_blank" rel="noopener">http://finance.sina.com.cn/zl/china/2021-04-18/zl-ikmxzfmk7496559.shtml</a></p><p>居民部门杠杆率增幅较大主要是受房地产市场影响。数据显示，在全部居民债务中，占最大比例的即是居民中长期消费贷款（主要是住房按揭贷款），占到了全部居民贷款的65%。</p><p><img src="/2021/04/21/央行工作论文读后感/2021-04-23-13-16-09.png" srcset="/img/loading.gif" alt></p><p>让我们再说得明白些。居民买房的首付使用了六个钱包，这六个钱包中或许还包含私人借债，因此实际居民借债率可能远高于这个数字。</p><p>中国居民已经逐渐由资金供给方变为资金的需求方。高房价掏空了年轻人们的钱包，房贷车贷负债累累，谈何储蓄？</p><h3 id="2-5-如何令居民储蓄率上升？"><a href="#2-5-如何令居民储蓄率上升？" class="headerlink" title="2.5 如何令居民储蓄率上升？"></a>2.5 如何令居民储蓄率上升？</h3><p>2.5 和 2.6 参考自<a href="https://www.thepaper.cn/newsDetail_forward_11420531" target="_blank" rel="noopener">《从养老负担和储蓄率之间的关系，深入解析中国“老龄化》</a>一文。</p><p>目前我国的储蓄中，有较大的份额是来自政府和企业，这是国民经济分配失衡所造成的。调整分配，使居民的收入份额上升，对缓解养老压力十分关键。同时，调整政府支出结构，增加公共物品供给，使居民用于这类产品的支出降下来，增加他们的净财富，有助于他们提高养老保障能力。</p><p>在高储蓄率下，之所以仍然面临巨大的养老压力，与过高的收入分配差距有关，低收入人群的养老风险较高的，他们需要为养老而储蓄，但是恰恰是他们的收入水平过低，无力储蓄。所以对养老问题并不能从问题本身来谈论。应对措施也应该更具有综合性和整体性，调节收入分配尤其重要。</p><h3 id="2-6-如何提升养老金缴费比率？"><a href="#2-6-如何提升养老金缴费比率？" class="headerlink" title="2.6 如何提升养老金缴费比率？"></a>2.6 如何提升养老金缴费比率？</h3><p>目前中国的养老金缴费率比较低。中国的非正规就业规模较大，这部分就业者主要是中低收入人群，他们之所以不愿意参保，原因在于缴纳养老金并不符合他们的利益最大化目标。</p><p>有两个比较明显的直接原因。</p><p>一是中国近年来的通货膨胀率较高，这就意味着未来的领取的养老金现值也较少；</p><p>二是中国的城市住房价格快速上涨，住房投资的回报率较高，这也促使劳动者更愿意领取较高的工资而不太看重养老金，因为当前领取工资收入，可以尽早积累起足够的资金用于买房或者其他投资，而养老金只能到退休以后才能领取。</p><p>高通胀和资产价格膨胀使人们增强了流动性偏好，而缴纳养老金对个人来说意味着增加了流动性较低的资产，劳动者更愿意选择哪怕是略微高一些的工资，而不是一个较低的工资加上一份养老保险。</p><p>因而在这种情况下，强制缴纳养老保险的规定往往难以得到落实，企业和雇员会努力采取措施规避这种规定。即使政府出台严格的规定，强制企业缴纳养老保险，个人和企业也都有很强的动机来规避。</p><p>当然，社会养老保障的参保率提高缓慢的原因是多方面的，例如缴费在地区间不可携带，高通胀和资产回报较高可能是一个重要原因。因此，治理通胀和维持房价稳定有助于养老体制的完善。</p><h2 id="3-文理之争"><a href="#3-文理之争" class="headerlink" title="3. 文理之争"></a>3. 文理之争</h2><p>“文科生太多”的说法在网络上引发轩然大波。话题“#文科生太多会影响国家发展吗”在中国社交媒体微博上的阅读量超过3.2亿次，大部分网友对此持批评态度。</p><p><img src="/2021/04/21/央行工作论文读后感/文科生太多.png" srcset="/img/loading.gif" alt></p><p>众所周知，我国理科生与文科生素来不睦，前者蔑视后者没逻辑，后者鄙夷前者没文化。</p><p>不过在网上的论战中，理科生底气更足一些。毕竟社会上一直流传着“学好数理化、走遍天下都不怕”的说法。相对地，文科一直被认为“无用”。</p><p>2020年，一名来自湖南省的高考状元因在大学选择了考古专业，再度在社交媒体引发争论。有网友认为考古专业“没钱途”，规劝她换专业。</p><p>但是人们在讨论文科和理科的时候，是否能够确切说出什么是“文科”，什么是“理科”呢？</p><p>关于文科生和理科生的定义，建议看下<a href="https://matters.news/@xiemeng/%E4%BB%8E%E7%BF%BB%E8%AF%91%E7%A4%BE%E4%BC%9A%E5%AD%A6%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8B%E6%96%87%E7%A7%91%E7%94%9F%E4%B8%8E%E7%90%86%E7%A7%91%E7%94%9F%E7%9A%84%E4%BA%92%E7%9B%B8%E9%84%99%E5%A4%B7-bafyreicrdy7y4fnmjktwnsxv6ljmkiq3ga4yqo5lvjzn3ng74fog32a6jm" target="_blank" rel="noopener">这篇文章的介绍</a>，相当全面。</p><p>透过现象看本质，现实情况是一些中国大学文科毕业生确实面临“就业难”和“薪资低”的困境。</p><p>加上2019年国务院发布的职业教育改革方案，能够看出国家其实是想解决一些行业人口过剩但高级技工人才短缺的问题。所以问题不在于文理之争，而在于人才分配不均。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>人口结构问题已成为中国未来发展所必须面对的问题。央行论文提出了一揽子解决方法，包括解除生育限制、提升储蓄率、稳房价和鼓励创新等；但也包含一些本人所不理解的观点，如储蓄率与人口结构的关系，关于“吃苦”的论述，以及“爹戳戳一个，娘戳戳一窝”的观点等。笔者就上述部分观点进行了深入调研和思辩。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>胡翠, 许召元. 人口老龄化对储蓄率影响的实证研究[J]. 经济学 (季刊), 2014, 13(4).</p><p>United Nations. Department of Economic and Social Affairs. World Economic and Social Survey 2007: Development in an ageing world[M]. UN, 2007.</p><p>一些参考文章链接已直接在原文列出。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;央行（中国人民银行）在2021年3月26日发表了一篇工作论文《关于我国人口转型的认识和应对之策》。论文一经发表便引起了全网的大讨论，新浪微博上的相关点击量达到3.2亿次。然而网络上的消息难免囿于其碎片话叙事风格，使人产生偏见。因此笔者抱着批判性学习的心态，拜读了该篇论文，并试图梳理主要内容，最后就相关观点提出自己的评论。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="record" scheme="https://superlova.github.io/categories/record/"/>
    
    
      <category term="middle income trap" scheme="https://superlova.github.io/tags/middle-income-trap/"/>
    
      <category term="social sciences" scheme="https://superlova.github.io/tags/social-sciences/"/>
    
  </entry>
  
  <entry>
    <title>【学习笔记】Docker网络</title>
    <link href="https://superlova.github.io/2021/04/18/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Docker%E7%BD%91%E7%BB%9C/"/>
    <id>https://superlova.github.io/2021/04/18/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Docker%E7%BD%91%E7%BB%9C/</id>
    <published>2021-04-18T13:53:06.000Z</published>
    <updated>2021-04-18T15:57:36.755Z</updated>
    
    <content type="html"><![CDATA[<p>Datawhale Docker学习笔记第四篇<br><a id="more"></a></p><h1 id="Docker-基础网络介绍"><a href="#Docker-基础网络介绍" class="headerlink" title="Docker 基础网络介绍"></a>Docker 基础网络介绍</h1><h2 id="外部访问容器"><a href="#外部访问容器" class="headerlink" title="外部访问容器"></a>外部访问容器</h2><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过-P或-p参数来指定端口映射。</p><p>当使用-P标记时，Docker会随机映射一个端口到内部容器开放的网络端口。 使用docker container ls可以看到，本地主机的 32768 被映射到了容器的 80 端口。此时访问本机的 32768 端口即可访问容器内 NGINX 默认页面。</p><pre><code>$ docker run -d -P nginx:alpine$ docker container ls -lCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMESfae320d08268        nginx:alpine        &quot;/docker-entrypoint.…&quot;   24 seconds ago      Up 20 seconds       0.0.0.0:32768-&gt;80/tcp   bold_mcnulty</code></pre><p>同样的，可以通过docker logs命令来查看访问记录。</p><pre><code>$ docker logs fa172.17.0.1 - - [25/Aug/2020:08:34:04 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0&quot; &quot;-&quot;</code></pre><p>-p则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有<code>ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</code>.</p><h2 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h2><p>下面先创建一个新的 Docker网络。</p><pre><code>$ docker network create -d bridge my-net</code></pre><p>-d参数指定Docker网络类型，有bridge overlay,其中overlay网络类型用于Swarm mode，在本小节中你可以忽略它。</p><p>运行一个容器并连接到新建的my-net网络</p><pre><code>$ docker run -it --rm --name busybox1 --network my-net busybox sh</code></pre><p>打开新的终端，再运行一个容器并加入到 my-net网络</p><pre><code>$ docker run -it --rm --name busybox2 --network my-net busybox sh</code></pre><p>再打开一个新的终端查看容器信息</p><pre><code>$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESb47060aca56b        busybox             &quot;sh&quot;                11 minutes ago      Up 11 minutes                           busybox28720575823ec        busybox             &quot;sh&quot;                16 minutes ago      Up 16 minutes                           busybox1</code></pre><p>下面通过 ping来证明busybox1容器和busybox2容器建立了互联关系。 在busybox1容器输入以下命令</p><pre><code>/ # ping busybox2PING busybox2 (172.19.0.3): 56 data bytes64 bytes from 172.19.0.3: seq=0 ttl=64 time=0.072 ms64 bytes from 172.19.0.3: seq=1 ttl=64 time=0.118 ms</code></pre><p>用ping来测试连接busybox2容器，它会解析成 172.19.0.3。 同理在busybox2容器执行ping busybox1，也会成功连接到。</p><pre><code>/ # ping busybox1PING busybox1 (172.19.0.2): 56 data bytes64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.064 ms64 bytes from 172.19.0.2: seq=1 ttl=64 time=0.143 ms</code></pre><p>这样，busybox1 容器和 busybox2 容器建立了互联关系。</p><p>Docker Compose 如果你有多个容器之间需要互相连接，推荐使用DockerCompose。</p><h2 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h2><p>如何自定义配置容器的主机名和 DNS 呢？秘诀就是Docker利用虚拟文件来挂载容器的 3个相关配置文件。</p><p>在容器中使用 mount命令可以看到挂载信息：</p><pre><code>$ mount/dev/disk/by-uuid/1fec...ebdf on /etc/hostname type ext4 .../dev/disk/by-uuid/1fec...ebdf on /etc/hosts type ext4 ...tmpfs on /etc/resolv.conf type tmpfs ...</code></pre><p>这种机制可以让宿主主机 DNS 信息发生更新后，所有Docker容器的 DNS 配置通过 /etc/resolv.conf文件立刻得到更新。</p><p>配置全部容器的 DNS ，也可以在 /etc/docker/daemon.json 文件中增加以下内容来设置。</p><pre><code>{  &quot;dns&quot; : [    &quot;114.114.114.114&quot;,    &quot;8.8.8.8&quot;  ]}</code></pre><p>这样每次启动的容器 DNS 自动配置为 114.114.114.114 和8.8.8.8。使用以下命令来证明其已经生效。</p><pre><code>$ docker run -it --rm ubuntu:18.04  cat etc/resolv.confnameserver 114.114.114.114nameserver 8.8.8.8</code></pre><p>如果用户想要手动指定容器的配置，可以在使用docker run命令启动容器时加入如下参数： -h HOSTNAME或者—hostname=HOSTNAME设定容器的主机名，它会被写到容器内的/etc/hostname 和 /etc/hosts。但它在容器外部看不到，既不会在docker container ls中显示，也不会在其他的容器的/etc/hosts看到。</p><p>—dns=IP_ADDRESS添加 DNS 服务器到容器的/etc/resolv.conf中，让容器用这个服务器来解析所有不在 /etc/hosts 中的主机名。</p><p>—dns-search=DOMAIN设定容器的搜索域，当设定搜索域为.example.com时，在搜索一个名为host的主机时，DNS 不仅搜索 host，还会搜索host.example.com。</p><p><strong>注意：</strong>如果在容器启动时没有指定最后两个参数，Docker会默认用主机上的/etc/resolv.conf来配置容器。</p><h1 id="Docker的网络模式"><a href="#Docker的网络模式" class="headerlink" title="Docker的网络模式"></a>Docker的网络模式</h1><p>可以通过docker network ls查看网络，默认创建三种网络。</p><pre><code>[root@localhost ~]# docker network lsNETWORK ID          NAME                DRIVER              SCOPE688d1970f72e        bridge              bridge              local885da101da7d        host                host                localf4f1b3cf1b7f        none                null                local</code></pre><p>常见网络的含义：</p><div class="table-container"><table><thead><tr><th>网络模式</th><th>简介</th></tr></thead><tbody><tr><td>Bridge</td><td>为每一个容器分配、设置 IP 等，并将容器连接到一个 docker0 虚拟网桥，默认为该模式。</td></tr><tr><td>Host</td><td>容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。</td></tr><tr><td>None</td><td>容器有独立的 Network namespace，但并没有对其进行任何网络设置，如分配 veth pair 和网桥连接，IP 等。</td></tr><tr><td>Container</td><td>新创建的容器不会创建自己的网卡和配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。</td></tr></tbody></table></div><h2 id="Bridge-模式"><a href="#Bridge-模式" class="headerlink" title="Bridge 模式"></a>Bridge 模式</h2><p>当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上，附加在其上的任何网卡之间都能自动转发数据包。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。从docker0子网中分配一个 IP 给容器使用，并设置 docker0 的 IP 地址为容器的默认网关。在主机上创建一对虚拟网卡veth pair设备，Docker 将 veth pair 设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到 docker0 网桥中。可以通过brctl show命令查看。</p><h2 id="Host-模式"><a href="#Host-模式" class="headerlink" title="Host 模式"></a>Host 模式</h2><p>host 网络模式需要在创建容器时通过参数 —net host 或者 —network host 指定；<br>采用 host 网络模式的 Docker Container，可以直接使用宿主机的 IP 地址与外界进行通信，若宿主机的 eth0 是一个公有 IP，那么容器也拥有这个公有 IP。同时容器内服务的端口也可以使用宿主机的端口，无需额外进行 NAT 转换；<br>host 网络模式可以让容器共享宿主机网络栈，这样的好处是外部主机与容器直接通信，但是容器的网络缺少隔离性。</p><h2 id="None-模式"><a href="#None-模式" class="headerlink" title="None 模式"></a>None 模式</h2><p>none 网络模式是指禁用网络功能，只有 lo 接口 local 的简写，代表 127.0.0.1，即 localhost 本地环回接口。在创建容器时通过参数 —net none 或者 —network none 指定；<br>none 网络模式即不为 Docker Container 创建任何的网络环境，容器内部就只能使用 loopback 网络设备，不会再有其他的网络资源。可以说 none 模式为 Docke Container 做了极少的网络设定，但是俗话说得好“少即是多”，在没有网络配置的情况下，作为 Docker 开发者，才能在这基础做其他无限多可能的网络定制开发。这也恰巧体现了 Docker 设计理念的开放。</p><h2 id="Container-模式"><a href="#Container-模式" class="headerlink" title="Container 模式"></a>Container 模式</h2><p>Container 网络模式是 Docker 中一种较为特别的网络的模式。在创建容器时通过参数 —net container:已运行的容器名称|ID 或者 —network container:已运行的容器名称|ID 指定；<br>处于这个模式下的 Docker 容器会共享一个网络栈，这样两个容器之间可以使用 localhost 高效快速通信。</p><p>Container 网络模式即新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样两个容器除了网络方面相同之外，其他的如文件系统、进程列表等还是隔离的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Datawhale Docker学习笔记第四篇&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Docker" scheme="https://superlova.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【学习笔记】Docker数据管理、数据卷和挂载主机目录</title>
    <link href="https://superlova.github.io/2021/04/16/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Docker%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E3%80%81%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%92%8C%E6%8C%82%E8%BD%BD%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95/"/>
    <id>https://superlova.github.io/2021/04/16/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Docker%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E3%80%81%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%92%8C%E6%8C%82%E8%BD%BD%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95/</id>
    <published>2021-04-16T13:25:46.000Z</published>
    <updated>2021-04-16T16:28:09.965Z</updated>
    
    <content type="html"><![CDATA[<p>Datawhale Docker学习笔记第三篇<br><a id="more"></a></p><h1 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h1><ul><li>创建数据卷<pre><code>docker volume create datawhale</code></pre>查看所有的数据卷<pre><code>docker volume ls</code></pre></li><li>启动一个挂载数据卷的容器</li></ul><p>在用 docker run 命令的时候，使用 —mount 标记来将数据卷挂载到容器里。在一次 docker run 中可以挂载多个 数据卷。</p><ul><li>查看数据卷的具体信息</li></ul><p>在主机里使用以下命令可以查看 web 容器的信息</p><pre><code>docker inspect web</code></pre><ul><li><p>删除数据卷</p><pre><code>docker volume rm datawhale  #datawhale为卷名</code></pre><p>无主的数据卷可能会占据很多空间，要清理请使用以下命令</p><pre><code>docker volume prune</code></pre><h1 id="挂载主机目录"><a href="#挂载主机目录" class="headerlink" title="挂载主机目录"></a>挂载主机目录</h1></li><li><p>挂载一个主机目录作为数据卷</p><pre><code>docker run -d -P \  --name web \  --mount type=bind,source=/src/webapp,target=/usr/share/nginx/html \  nginx:alpine</code></pre><p>使用 —mount 标记可以指定挂载一个本地主机的目录到容器中去。</p></li><li><p>查看数据卷的具体信息</p></li></ul><p>在主机里使用以下命令可以查看 web 容器的信息</p><pre><code>docker inspect web</code></pre><ul><li>挂载一个本地主机文件作为数据卷</li></ul><p>—mount 标记也可以从主机挂载单个文件到容器中</p><pre><code>docker run --rm -it \   --mount type=bind,source=$HOME/.bash_history,target=/root/.bash_history \   ubuntu:18.04 \   bash</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Datawhale Docker学习笔记第三篇&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Docker" scheme="https://superlova.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【学习笔记】如何求出任意日期是星期几？</title>
    <link href="https://superlova.github.io/2021/04/16/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%A6%82%E4%BD%95%E6%B1%82%E5%87%BA%E4%BB%BB%E6%84%8F%E6%97%A5%E6%9C%9F%E6%98%AF%E6%98%9F%E6%9C%9F%E5%87%A0%EF%BC%9F/"/>
    <id>https://superlova.github.io/2021/04/16/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%A6%82%E4%BD%95%E6%B1%82%E5%87%BA%E4%BB%BB%E6%84%8F%E6%97%A5%E6%9C%9F%E6%98%AF%E6%98%9F%E6%9C%9F%E5%87%A0%EF%BC%9F/</id>
    <published>2021-04-16T11:59:38.000Z</published>
    <updated>2021-04-16T14:56:40.494Z</updated>
    
    <content type="html"><![CDATA[<p>已知某年月日，如何得到这一天是星期几？<br>已知两日期的年月日，如何得到这两日期之间相差多少天？<br>如此种种问题，均可以利用蔡勒公式解决。</p><a id="more"></a><h1 id="一、已知日期y年m月d日，如何求解该日期是周几？"><a href="#一、已知日期y年m月d日，如何求解该日期是周几？" class="headerlink" title="一、已知日期y年m月d日，如何求解该日期是周几？"></a>一、已知日期y年m月d日，如何求解该日期是周几？</h1><h2 id="1-问题转化"><a href="#1-问题转化" class="headerlink" title="1. 问题转化"></a>1. 问题转化</h2><p>该问题容易转换为计算1年1月1日与y年m月d日之间的差值。如何计算两个日期之间的差值？</p><p>不难想到，首先求解前y年的天数$w_1$，然后求解从y年1月1日到y年m月1日之间的天数$w_2$，最后求解m月1日到m月d日之间的天数（即为d天），将这三个值相加即可得到结果$w$。</p><p><img src="/2021/04/16/【学习笔记】如何求出任意日期是星期几？/计算方法.png" srcset="/img/loading.gif" alt></p><p>得到天数$w$之后，将值与7取余，$w\mod 7 == 1$ 就是星期一， $w\mod 7 == 2$ 就是星期二，$w\mod 7 == 0$ 就是星期天。</p><h2 id="2-判断闰年"><a href="#2-判断闰年" class="headerlink" title="2. 判断闰年"></a>2. 判断闰年</h2><p>这个问题的难点在于年和月的计算。一年有365天，闰年是366天（2月中多一天）。如何判断y是闰年还是平年？</p><p>按照我们一直以来学习的知识，闰年按照如下方法进行计算：</p><p>普通闰年：公历年份是4的倍数，且不是100的倍数的，为闰年（如2004年、2020年等就是闰年）。</p><p>世纪闰年：公历年份是整百数的，必须是400的倍数才是闰年（如1900年不是闰年，2000年是闰年）。</p><p>则y年对应的天数 $w_1$ 可以这样计算：</p><script type="math/tex; mode=display">w_1 = 365\times y + \frac{y}{4} - \frac{y}{100} + \frac{y}{400}</script><h2 id="3-计算月份对应的天数"><a href="#3-计算月份对应的天数" class="headerlink" title="3. 计算月份对应的天数"></a>3. 计算月份对应的天数</h2><p>每个月的天数是不同的，并且根据当年是平年还是闰年，1月到m月之间的日期也有所不同，不能一概而论。难道我们需要使用各种情况分析，通过嵌套if语句，最后得到一个丑陋但能用的怪物吗？不必！下面两种情况都能在 O(1) 的空间和时间复杂度内计算得到 y年1月1日到y年m月1日之间的天数。</p><h3 id="3-1-平凡解法：储存12个月对应的天数表"><a href="#3-1-平凡解法：储存12个月对应的天数表" class="headerlink" title="3.1 平凡解法：储存12个月对应的天数表"></a>3.1 平凡解法：储存12个月对应的天数表</h3><p>最容易想到的当然是将平年的12个月对应的天数存在数组中，闰年的另外保存12个月的天数。每次计算，直接取对应下标的值即可。</p><pre><code class="lang-python">def compute_date_normal(y, m, d):    isleap = False    if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0:        isleap = True    y = y - 1  # 计算经过了完整的多少年    yd = 365 * y + y // 4 - y // 100 + y // 400    month_arr = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]    leap_month_arr = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]    if isleap:        md = sum(leap_month_arr[:m - 1])    else:        md = sum(month_arr[:m - 1])    # print(yd, md, d)    return yd + md + d</code></pre><h3 id="3-2-蔡勒公式：24个参数-—-gt-3个参数"><a href="#3-2-蔡勒公式：24个参数-—-gt-3个参数" class="headerlink" title="3.2 蔡勒公式：24个参数 —&gt; 3个参数"></a>3.2 蔡勒公式：24个参数 —&gt; 3个参数</h3><p>有没有更优雅、更酷的方法来改进该算法？有的！我们可以使用一个神奇的公式：蔡勒公式。</p><p>克里斯蒂安·蔡勒（Julius Christian Johannes Zeller，1822-1899）是一名德国数学家。蔡勒公式（Zeller’s congruence），是一种计算任何一天是一星期中哪一天的算法，由德国数学家克里斯提安·蔡勒发表。蔡勒公式的特点是不用判断闰年平年，不用判断大小月，直接在O(1)的复杂度下解决日期和星期的转换问题。很神奇是吧？</p><p>具体地，蔡勒公式计算的是从公元1年1月1日到某日期过了多少天。天数$w$的计算方法如下所示：</p><script type="math/tex; mode=display">w = 365\times y + \frac{y}{4} - \frac{y}{100} + \frac{y}{400} + \frac{153\times m-457}{5} + d - 306</script><p>其中y为某一年，m为该年中的某一月，d为该月中的某一天。</p><hr><p>好吧，你肯定会问 153、457和306这三个参数是从哪里来的了。</p><p>不要以为蔡勒公式中的前半部分还是$w_1$的解法，事实上蔡勒公式把y年全年都给算进去了！也就是说，蔡勒公式的前半部分$w_1$多计算了y年m月d日到y年12月31日这段日期。</p><p>接下来计算这段日期的长度。但是蔡勒公式不急着做这件事，而是计算了y年12月31日到y年3月1日之间经过了多少天。后半部分计算月份的分式我们将其命名为$w_2$：</p><script type="math/tex; mode=display">w_2=M_3+M_4+\cdots+M_12=31+30+\cdots+31=306</script><p>上式中$M_n$为n月的天数。</p><hr><p>为什么选择3月1日作为起始呢？因为3月到12月对于平年和闰年来说都是固定的，因此该数值也是固定的，为306天。</p><p>但是如果我们计算1月1日到12月31日的长度的话，就会因为2月的不稳定性而需要分类讨论了。</p><p>由此，只要我们计算的月份不是1月和2月，那么我们不必在乎这一年到底是闰年还是平年。</p><p>那么如果我计算的日期的确是1月或2月的某日怎么办呢？要想避免讨论平年闰年，无论如何都要避过计算2月！</p><p>蔡勒公式采取的方案是，不计算到y年12月31日，而是少计算一年(1.01.01)—(y-1.12.31)，再加上12个月。由此，原来的1月就变成了13月，原来的2月就变成了14月。</p><hr><p>下面将是蔡勒公式中最难以理解的部分，那就是计算从y年3月1日到4月（X月）1日之间经过了多少天这一部分。</p><p>我们首先看一个统计表，这个表列出了3月1日到各个月份的首日（X月1日）之间经过了多少天：</p><div class="table-container"><table><thead><tr><th style="text-align:center">月份</th><th style="text-align:center">该月天数</th><th style="text-align:center">该月首天与3/1的差值</th></tr></thead><tbody><tr><td style="text-align:center">3</td><td style="text-align:center">31</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">30</td><td style="text-align:center">31</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">31</td><td style="text-align:center">61</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">30</td><td style="text-align:center">92</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">31</td><td style="text-align:center">122</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">31</td><td style="text-align:center">153</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">30</td><td style="text-align:center">184</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">31</td><td style="text-align:center">214</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">30</td><td style="text-align:center">245</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">31</td><td style="text-align:center">275</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">31</td><td style="text-align:center">306</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">X</td><td style="text-align:center">337</td></tr></tbody></table></div><p>我们想找到一个简单的映射关系，能把月份给换算成该月首天与3月1日之间的差值：$f(m)$。</p><p>细心观察我们可以发现，除了个位之外，该差值是一个等差数列，公差为30天。而个位的变化为1,1,2,2,3,4,4,5,5,6,7.</p><p>存不存在一个线性函数，能够拟合个位的变化呢？答案是有的，那就是：</p><script type="math/tex; mode=display">\lfloor\frac{m\times 3-7}{5}\rfloor</script><p>左右括号是向下取整。其实我现在也没能找到该式与该问题之间的逻辑关系，但是该式恰好能够拟合差值的个位数变化，因此我也就“拿来主义”了。</p><p>至此我们已经得到月份和差值之间的函数关系：</p><script type="math/tex; mode=display">w_3=30\times(m-3)+\lfloor(m\times3-7)/5\rfloor</script><script type="math/tex; mode=display">=⌊(153×m-457)/5⌋</script><p>在公式的最后，将日期d加上，我们就得到了最终的蔡勒公式。</p><p>下面是蔡勒公式的具体实现。可以看到，代码的确短了很多，而且参数也从24个变成了3个。</p><pre><code class="lang-python">def zellers(y, m, d):    if m &lt; 3:        y -= 1        m += 12    return 365*y + y//4 - y//100 + y//400 + (153*m-457)//5 + d – 306def test_zellers():    w = zellers(2021,1,7)    print((w%7+7)%7)</code></pre><h1 id="二、奇思妙想"><a href="#二、奇思妙想" class="headerlink" title="二、奇思妙想"></a>二、奇思妙想</h1><p>知其然，更要知其所以然。我写这篇文章的目的，其实是因为我碰到了一道笔试题，在解题过程中，我无意发现了一些有趣的解法，但是网上的文章又不能解答我的疑问，所以我就想通过自己的调研，解答自己的问题。如果这个问题的回答能帮到你，那就再好不过了。</p><h2 id="1-为什么闰年这样计算"><a href="#1-为什么闰年这样计算" class="headerlink" title="1. 为什么闰年这样计算"></a>1. 为什么闰年这样计算</h2><p>闰年是为了弥补因人为历法规定的年度天数365日和实际公转时间365.25日的差距而设立的。即是，每四年便会累积1日 ，所以四年便会有一次闰年。多出来的一天为2月29日。</p><p>其实闰年的计算方法一直是有争议的，因为一年的公转日纪年误差会随着年份的累计而不断扩大，最终必须以一天的的方式扩展开来。</p><p>“四年一闰，百年不闰，四百年再闰”，这就造成了在一些特殊年份，会出现八年一闰的现象。</p><p>闰年这个东西其实也是舶来品，因为中国传统纪年方式是按照农历纪年的，我们会在一年之中添加一个月，称之为闰月。</p><p>农历作为阴阳历的一种，每月的天数依照月亏而定，一年的时间以12个月为基准，平年比一回归年少约11天。为了合上地球围绕太阳运行周期即回归年，每隔2到3年，增加一个月，增加的这个月为闰月。闰月加到哪个月，以农历历法规则推断，主要依照与农历的二十四节气相符合来确定。在加有闰月的那一年有13个月，历年长度为383至385日，这一年也称为闰年。如2004年猴年的农历中，有两个二月，通常称为前二月和后二月（即闰月）。</p><p>而现在使用公元纪年，则是格里高利历所规定。</p><h2 id="2-公元纪年"><a href="#2-公元纪年" class="headerlink" title="2. 公元纪年"></a>2. 公元纪年</h2><p>公元是公历纪元的简称，是一个被当今国际社会最广泛地使用的纪年标准。其源自于西方国家使用的基督纪年，以当时认定的耶稣出生年为纪年的开始。第一年被称作基督元年（耶稣出生的那一年）。后来，由于西方文化的强势，西历纪元成为世界通用标准。</p><p>1911 年 10 月 10 日辛亥革命后，湖北军政府使用黄帝纪年。次年 （1912年），中华民国临时政府决定采用国际通用的公元历法做为国历，但纪元部分沿用中国独自的纪年传统，称民国纪年。</p><p>1949年9月27日，中国人民政治协商会议第一届全体会议决议，同年10月1日成立的中华人民共和国放弃使用民国纪年，改采用世界通用的公元纪年制度[5]，大陆地区改称“公元”，以昭明其是“国际共同”，避免“西方独用”的歧义。</p><h2 id="2-公元1年1月1日是星期几？"><a href="#2-公元1年1月1日是星期几？" class="headerlink" title="2. 公元1年1月1日是星期几？"></a>2. 公元1年1月1日是星期几？</h2><p>如果你以为你的程序特别厉害了，那我可要考考你了：公元1年1月1日是星期几？</p><p>按照上文分析，应该是周一。但是知乎上的回答指出，这样计算是不对的：</p><p><img src="/2021/04/16/【学习笔记】如何求出任意日期是星期几？/知乎回答.png" srcset="/img/loading.gif" alt></p><p>教皇格里戈八世在1582年2月24日颁布法令，永远抹去了1582年10月5日到1582年10月14日。历史上从来不曾有过这10天。1582年10月4日是星期四，它的第二天是1582年10月15日星期五。因此考虑到这10天的影响再去推算，公元元年1月1日就是星期六了。</p><p>这方面还是华为的手机日历比较厉害：</p><p><img src="/2021/04/16/【学习笔记】如何求出任意日期是星期几？/华为.png" srcset="/img/loading.gif" alt></p><p><img src="/2021/04/16/【学习笔记】如何求出任意日期是星期几？/华为2.png" srcset="/img/loading.gif" alt></p><p>可以清楚地看到，从1582年10月5日到1582年10月14日的十天被永远抹去了。</p><p>华为，牛！</p><h2 id="变化问题"><a href="#变化问题" class="headerlink" title="变化问题"></a>变化问题</h2><p>假设存在平行世界，在这个世界中一年的每个月都比我们的世界少一天，除此之外该平行世界的平年闰年、大小月都与我们所处的世界一致。如何计算任意日期是该世界的星期几？</p><p>这个时候蔡勒公式就不太好使了，起码你一时半会儿想不出参数如何变化的。既然时间复杂度和空间复杂度都是O(1)，那我们不妨直接用传统的方法来计算：</p><pre><code class="lang-py">def compute_date_shrink(y, m, d):    isleap = False    if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0:        isleap = True    y = y - 1  # 计算经过了完整的多少年    yd = 353 * y + y // 4 - y // 100 + y // 400    month_arr = [30, 27, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30]    leap_month_arr = [30, 28, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30]    if isleap:        md = sum(leap_month_arr[:m - 1])    else:        md = sum(month_arr[:m - 1])    # print(yd, md, d)    return yd + md + d</code></pre><p>其实我自己也实现了蔡勒公式的变种方法，但是解释起来过于复杂。由于虚拟历法没有现实参照，我也不知道我写的程序对不对，只能把程序放在最后，供大家参考。</p><pre><code class="lang-py">def zellers_shrinked(y, m, d):    if m &lt; 3:        y -= 1        m += 12    return 353 * y + y // 4 - y // 100 + y // 400 + (148 * m - 447) // 5 + d - 295</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;已知某年月日，如何得到这一天是星期几？&lt;br&gt;已知两日期的年月日，如何得到这两日期之间相差多少天？&lt;br&gt;如此种种问题，均可以利用蔡勒公式解决。&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="algorithm" scheme="https://superlova.github.io/tags/algorithm/"/>
    
      <category term="zeller" scheme="https://superlova.github.io/tags/zeller/"/>
    
  </entry>
  
  <entry>
    <title>【学习笔记】Docker镜像与容器</title>
    <link href="https://superlova.github.io/2021/04/15/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Docker%E9%95%9C%E5%83%8F%E4%B8%8E%E5%AE%B9%E5%99%A8/"/>
    <id>https://superlova.github.io/2021/04/15/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Docker%E9%95%9C%E5%83%8F%E4%B8%8E%E5%AE%B9%E5%99%A8/</id>
    <published>2021-04-15T14:57:55.000Z</published>
    <updated>2021-04-15T17:03:15.200Z</updated>
    
    <content type="html"><![CDATA[<p>Datawhale Docker学习笔记第二篇<br><a id="more"></a></p><h1 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h1><ul><li>获取镜像</li></ul><p>docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</p><ul><li>列出镜像</li></ul><p>docker image ls</p><ul><li>删除本地镜像</li></ul><p>docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; …]</p><ul><li>Dockerfile构建镜像</li></ul><p>如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。</p><p>这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。</p><p>在项目的根目录下，新建一个文本文件 Dockerfile</p><p>入下面的内容。</p><p>FROM node:8.4<br>COPY . /app<br>WORKDIR /app<br>RUN npm install —registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>EXPOSE 3000</p><p>上面代码一共五行，含义如下。</p><p>FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。<br>COPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。<br>WORKDIR /app：指定接下来的工作路径为/app。<br>RUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。<br>EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。</p><p>有了 Dockerfile 文件以后，就可以使用docker image build命令创建 image 文件了</p><h1 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h1><p>容器是独立运行的一个或一组应用，以及它们的运行态环境。</p><ul><li>新建并启动容器</li></ul><p>使用 ubuntu 输出一个 “Hello World”，之后终止容器。</p><p>docker run ubuntu:18.04 /bin/echo ‘Hello world’<br>Hello world</p><p>启动一个 bash 终端，允许用户进行交互</p><p>docker run -t -i ubuntu:18.04 /bin/bash<br>root@af8bae53bdd3:/#</p><p>其中，-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。</p><p>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p><p>检查本地是否存在指定的镜像，不存在就从registry下载<br>利用镜像创建并启动一个容器<br>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层<br>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去<br>从地址池配置一个 ip 地址给容器<br>执行用户指定的应用程序<br>执行完毕后容器被终止</p><ul><li>启动已终止的容器</li></ul><p>可以利用 docker container start 命令，直接将一个已经终止（exited）的容器启动运行。</p><ul><li>停止容器</li></ul><p>docker stop可以停止运行的容器。理解：容器在docker host中实际上是一个进程，docker stop命令本质上是向该进程发送一个SIGTERM信号。如果想要快速停止容器，可使用docker kill命令，其作用是向容器进程发送SIGKILL信号。</p><p>docker ps 列出容器，默认列出只在运行的容器；加-a可以显示所有的容器</p><ul><li>重启容器</li></ul><p>对于已经处于停止状态的容器，可以通过docker start重新启动。docker start会保留容器的第一次启动时的所有参数。docker restart可以重启容器，其作用就是依次执行docker stop和docker start。</p><ul><li>后台运行容器</li></ul><p>添加 -d 参数来实现后台运行容器。在使用 -d 参数时，容器启动后会进入后台，启动完容器之后会停在host端；某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令</p><p>docker exec 后边可以跟多个参数，这里主要说明 -i -t 参数。</p><p>只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p><p>当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p><p>attach和exec的区别<br>attach和exec的区别： （1）attach直接进入容器启动命令的终端，不会启动新的进程； （2）exec则是在容器中打开新的终端，并且可以启动新的进程； （3）如果想直接在终端中查看命令的输出，用attach，其他情况使用exec；</p><ul><li>删除容器</li></ul><p>可以使用 docker container rm 来删除一个处于终止状态的容器。</p><p>docker container rm trusting_newton<br>trusting_newton</p><p>如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。</p><p>用 docker container ls -a 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。</p><p>docker container prune</p><p>批量删除所有已经退出的容器</p><p>docker rm -v $(docker ps -aq -f status=exited)</p><ul><li>导出容器</li></ul><p>如果要导出本地某个容器，可以使用 docker export 命令。</p><p>这样将导出容器快照到本地文件。</p><ul><li>导入容器</li></ul><p>可以使用 docker import 从容器快照文件中再导入为镜像</p><p>$ cat ubuntu.tar | docker import - test/ubuntu:v1.0<br>$ docker image ls<br>REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE<br>test/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB</p><p>用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Datawhale Docker学习笔记第二篇&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Docker" scheme="https://superlova.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【学习笔记】Docker的安装</title>
    <link href="https://superlova.github.io/2021/04/13/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Docker%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>https://superlova.github.io/2021/04/13/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Docker%E7%9A%84%E5%AE%89%E8%A3%85/</id>
    <published>2021-04-12T16:34:56.000Z</published>
    <updated>2021-04-12T17:03:11.959Z</updated>
    
    <content type="html"><![CDATA[<p>Datawhale Docker学习笔记第一篇<br><a id="more"></a></p><p>为了今后的方便，我选择将Docker安装在实验室的电脑上，服务器的操作系统为 Ubuntu 18.04 LTS 。整个安装过程参考这篇文章(<a href="https://vuepress.mirror.docker-practice.com/install/ubuntu)。" target="_blank" rel="noopener">https://vuepress.mirror.docker-practice.com/install/ubuntu)。</a></p><p>我曾在一款老旧的笔记本电脑上尝试过安装 Docker ，但是最终失败了，原因是 Docker 不支持 32 位的操作系统。震惊！ Docker竟然不支持 32位操作系统！</p><p>由于我没有安装过老版本，因此不需要执行卸载旧版本的语句。直接执行</p><pre><code class="lang-sh">$ sudo apt-get update$ sudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    gnupg \    lsb-release</code></pre><p>这里还出现了一些小插曲，当我执行完上面的 install 语句后，我与服务器建立的 ssh 连接断掉了，之后我试图重新连接居然提示密码错误。最后我重启虚拟机，修改 /etc/ssh/sshd_config 中的 PermitRootLogin 字段为 yes 解决了该问题。</p><p>添加软件源的 GPG 密钥，下载并安装，这一部分不再赘述。</p><pre><code class="lang-sh">$ curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg$ echo \  &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null$ sudo apt-get update$ sudo apt-get install docker-ce docker-ce-cli containerd.io</code></pre><p>之后启动 Docker 服务：</p><pre><code class="lang-sh">$ sudo systemctl enable docker$ sudo systemctl start docker</code></pre><p>激动人心的时刻到了，测试下 Docker 是否安装成功，执行一个 Hello World 看看：</p><pre><code class="lang-sh">$ sudo docker run --rm hello-world</code></pre><p><img src="/2021/04/13/【学习笔记】Docker的安装/2021-04-13-00-48-07.png" srcset="/img/loading.gif" alt></p><p>大功告成！收工睡觉~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Datawhale Docker学习笔记第一篇&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Docker" scheme="https://superlova.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【学习笔记】机器学习——支持向量机SVM</title>
    <link href="https://superlova.github.io/2020/12/29/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/"/>
    <id>https://superlova.github.io/2020/12/29/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/</id>
    <published>2020-12-29T11:57:32.000Z</published>
    <updated>2021-01-26T07:01:41.538Z</updated>
    
    <content type="html"><![CDATA[<p>什么是SVM？SVM是如何用于分类的？为什么求解对偶问题？核函数的原理是什么？<br><a id="more"></a></p><h1 id="什么是支持向量机（Support-Vector-Machine-SVM）"><a href="#什么是支持向量机（Support-Vector-Machine-SVM）" class="headerlink" title="什么是支持向量机（Support Vector Machine, SVM）"></a>什么是支持向量机（Support Vector Machine, SVM）</h1><p>支持向量机是一种二分类模型。它的基本模型是定义在特征空间上的间隔最大的线性分类器，间隔最大使它有别于感知机。通过核技巧，支持向量机可以处理非线性分类问题。</p><p>支持向量机的学习算法是求解凸二次规划的最优化算法。</p><p>由于算法确定超平面时需要使用距离超平面最近的几个训练样本点，这些样本被称为“支持向量”，支持向量机由此得名。</p><p>假设训练样本<br><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-20-56-41.png" srcset="/img/loading.gif" alt></p><p>则超平面可以这样表示<br><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-20-56-54.png" srcset="/img/loading.gif" alt></p><p>这也就意味着<br><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-20-57-06.png" srcset="/img/loading.gif" alt></p><p>选取那些离超平面最近的两个不同类别的数据点，将他们带入超平面方程，发现<br><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-20-57-21.png" srcset="/img/loading.gif" alt><br><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-20-57-25.png" srcset="/img/loading.gif" alt></p><p>则两个点到超平面距离之和为<br><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-20-57-37.png" srcset="/img/loading.gif" alt></p><p>这是由于点到直线的距离公式为<br><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-20-57-49.png" srcset="/img/loading.gif" alt></p><p>这几个令分子为1的数据点，就被称作支持向量。</p><h1 id="支持向量机如何分类"><a href="#支持向量机如何分类" class="headerlink" title="支持向量机如何分类"></a>支持向量机如何分类</h1><p>支持向量机的学习算法的目标是在特征空间中找到一个分离超平面，能将实例分到不同的类。当数据线性可分时，存在无数个分离超平面能将实例正确分开。感知机利用误分类最小的策略，而支持向量机则利用间隔最大化求得最优超平面，这时解是唯一的。</p><p>选取那些支持向量，即距离超平面最近的两个样本点，计算它们到超平面的距离2/||w||<br>通过优化2/||w||使之最大化，便可使得边距扩大。为了寻找超平面 $ F(x)=wx+b $ ，支持向量机试图求解这个优化问题：<br><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-20-59-04.png" srcset="/img/loading.gif" alt></p><p>可以转化为<br><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-20-54-11.png" srcset="/img/loading.gif" alt></p><p>高等数学告诉我们，求解带有限制条件的优化问题，拉格朗日乘子法是经常用于考虑的方法。<br>问题转化为：<br><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-20-59-33.png" srcset="/img/loading.gif" alt></p><p>也就是说，将带N个约束条件的二次优化问题，转换为无约束优化问题。<br>这里注意限制条件变成了1-。。。这是因为拉格朗日乘数法要求参数必须大于等于零，限制条件需要相遇等于零。</p><p>由此，问题变成了$\min_{w,b}\max_{\lambda}\mathcal{L}(w,b,\lambda)$<br>先把$\lambda$视作参数，将$w,b$视作常数，求$\mathcal{L}$的最大值。</p><p>$\min_{w,b} \max_{\lambda} \mathcal{L}(w,b,\lambda)$和原问题是等价的。</p><h1 id="为什么求解对偶问题"><a href="#为什么求解对偶问题" class="headerlink" title="为什么求解对偶问题"></a>为什么求解对偶问题</h1><p>由于满足KKT条件，进而将原问题转化为对偶问题，即更换求解max和min 的次序。<br><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-21-11-01.png" srcset="/img/loading.gif" alt></p><p>可以看到，原问题的限制条件中包含较为复杂的线性不等式，这是阻碍我们进行优化的问题所在；而其对偶问题不但简化了限制条件，而且包含$\sum{\lambda_iy_i}=0$很容易消去，极大降低了求解难度。</p><h1 id="核函数的原理"><a href="#核函数的原理" class="headerlink" title="核函数的原理"></a>核函数的原理</h1><p>计算两个向量在隐式映射过后的空间中的内积的函数叫做核函数（Kernel Function）<br><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-21-16-23.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-21-27-34.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/12/29/【学习笔记】机器学习——支持向量机SVM/2020-12-29-21-27-49.png" srcset="/img/loading.gif" alt></p><p>核函数目的：把原坐标系里线性不可分的数据用Kernel投影到另一个空间，尽量使得数据在新的空间里线性可分。</p><p>核函数的特点：</p><p>1）核函数的引入避免了“维数灾难”，大大减小了计算量。而输入空间的维数n对核函数矩阵无影响，因此，核函数方法可以有效处理高维输入。</p><p>2）无需知道非线性变换函数$\phi$的形式和参数.</p><p>3）核函数的形式和参数的变化会隐式地改变从输入空间到特征空间的映射，进而对特征空间的性质产生影响，最终改变各种核函数方法的性能。</p><p>4）核函数方法可以和不同的算法相结合，形成多种不同的基于核函数技术的方法，且这两部分的设计可以单独进行，并可以为不同的应用选择不同的核函数和算法。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>《机器学习》周志华</p><p>《统计学习方法》李航</p><p>《机器学习基础》梅尔亚·莫里等</p><p>SVM入门（七）为何需要核函数：<a href="http://www.blogjava.net/zhenandaci/archive/2009/03/06/258288.html" target="_blank" rel="noopener">http://www.blogjava.net/zhenandaci/archive/2009/03/06/258288.html</a></p><p>如何通俗地讲解对偶问题？尤其是拉格朗日对偶lagrangian duality？知乎回答：<a href="https://www.zhihu.com/question/58584814" target="_blank" rel="noopener">https://www.zhihu.com/question/58584814</a></p><p>为什么支持向量机要用拉格朗日对偶算法来解最大化间隔问题？知乎回答：<a href="https://www.zhihu.com/question/36694952" target="_blank" rel="noopener">https://www.zhihu.com/question/36694952</a></p><p>简易解说拉格朗日对偶（Lagrange duality）：<a href="https://www.cnblogs.com/90zeng/p/Lagrange_duality.html" target="_blank" rel="noopener">https://www.cnblogs.com/90zeng/p/Lagrange_duality.html</a></p><p>拉格朗日对偶性：<a href="https://www.cnblogs.com/nxf-rabbit75/p/11453355.html" target="_blank" rel="noopener">https://www.cnblogs.com/nxf-rabbit75/p/11453355.html</a></p><p>机器学习白板推导：<a href="https://www.bilibili.com/video/BV1aE411o7qd" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1aE411o7qd</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是SVM？SVM是如何用于分类的？为什么求解对偶问题？核函数的原理是什么？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="machine learning" scheme="https://superlova.github.io/tags/machine-learning/"/>
    
      <category term="SVM" scheme="https://superlova.github.io/tags/SVM/"/>
    
  </entry>
  
  <entry>
    <title>【学习笔记】Ubuntu 18.04 安装Go的踩坑指南</title>
    <link href="https://superlova.github.io/2020/10/02/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Ubuntu-18-04-%E5%AE%89%E8%A3%85Go%E7%9A%84%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>https://superlova.github.io/2020/10/02/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Ubuntu-18-04-%E5%AE%89%E8%A3%85Go%E7%9A%84%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/</id>
    <published>2020-10-02T03:26:10.000Z</published>
    <updated>2020-10-02T06:56:11.134Z</updated>
    
    <content type="html"><![CDATA[<p>Go安装中遇到的坑<br><a id="more"></a></p><p>gvm是第三方开发的Go多版本管理工具，利用gvm下载和安装go。</p><p>执行以下代码时，你应该确保自己安装有curl</p><pre><code>bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</code></pre><p>在执行上述curl时，我的ubuntu 18.04报错</p><p>curl: (7) Failed to connect to <a href="http://raw.githubusercontent.com/" target="_blank" rel="noopener">raw.githubusercontent.com</a> port 443: Connection refused</p><p>经过<a href="[https://github.com/hawtim/blog/issues/10](https://github.com/hawtim/blog/issues/10">这个</a>)帖子的指引，我在hosts中添加了如下几行：</p><p>199.232.68.133 raw.githubusercontent.com</p><p>199.232.68.133 user-images.githubusercontent.com</p><p>199.232.68.133 avatars2.githubusercontent.com</p><p>199.232.68.133 avatars1.githubusercontent.com</p><p>curl便可以正常下载了。</p><p>安装完成gvm后我们就可以安装go了：</p><pre><code>gvm install go1.15.2gvm use go1.15.2</code></pre><p>这个时候出现错误</p><p>zyt@ubuntu:~$ gvm install go1.15.2<br>Installing go1.15.2…</p><ul><li>Compiling…<br>/home/zyt/.gvm/scripts/install: line 84: go: command not found<br>ERROR: Failed to compile. Check the logs at /home/zyt/.gvm/logs/go-go1.15.2-compile.log<br>ERROR: Failed to use installed version</li></ul><p>经查询，Go版本在1.5以上，需要在指令最后加上-B</p><p><a href="https://github.com/moovweb/gvm#a-note-on-compiling-go-15" target="_blank" rel="noopener">https://github.com/moovweb/gvm#a-note-on-compiling-go-15</a></p><p>zyt@ubuntu:~$ gvm install go1.15.2 -B<br>Installing go1.15.2 from binary source</p><pre><code>gvm use go1.15.2export GOROOT_BOOTSTRAP=$GOROOTgvm install go1.5zyt@ubuntu:~$ gvm listgvm gos (installed)=&gt; go1.15.2zyt@ubuntu:~$ gvm listallgvm gos (available)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go安装中遇到的坑&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Golang" scheme="https://superlova.github.io/tags/Golang/"/>
    
      <category term="安装" scheme="https://superlova.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>【竞赛打卡】leetcode打卡：查找算法2</title>
    <link href="https://superlova.github.io/2020/08/27/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91leetcode%E6%89%93%E5%8D%A1%EF%BC%9A%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%952/"/>
    <id>https://superlova.github.io/2020/08/27/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91leetcode%E6%89%93%E5%8D%A1%EF%BC%9A%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%952/</id>
    <published>2020-08-27T11:32:22.000Z</published>
    <updated>2020-10-23T05:48:38.865Z</updated>
    
    <content type="html"><![CDATA[<p>见多了优秀的文章，再写博客的时候就会感叹自己的学识浅薄。<br><a id="more"></a></p><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1 两数之和"></a>1 两数之和</h2><pre><code class="lang-cpp">class Solution {public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {        if (nums.empty()) return {};        unordered_map&lt;int, int&gt; hash;        vector&lt;int&gt; res;        // construct dict        for (int i = 0; i &lt; nums.size(); ++i) {            hash[nums[i]] = i;        }        for (int i = 0; i &lt; nums.size(); ++i) {            int temp = target - nums[i];            auto iter = hash.find(temp);            if (iter != hash.end() &amp;&amp; iter-&gt;second != i) {                res.push_back(i);                res.push_back(iter-&gt;second);                break;            }        }        return res;    }};</code></pre><p>思想：用hash把待查数组保存起来，这样再次查找的时间就是O(1)了。</p><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15 三数之和"></a>15 三数之和</h2><pre><code class="lang-py">class Solution:    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:        res = []        size = len(nums)        if size &lt; 3: return res        nums.sort()        for i in range(size-2):            if i &gt; 0 and nums[i] == nums[i-1]: continue            j = i + 1            k = size - 1            while j &lt; k:                ans = nums[i] + nums[j] + nums[k]                if (ans &gt; 0): k = k - 1                elif (ans &lt; 0): j = j + 1                else:                    res.append([nums[i], nums[j], nums[k]])                    while j &lt; size and nums[j] == nums[j-1]: j += 1                    k -= 1                    while k &gt;= 0 and nums[k] == nums[k+1]: k -= 1        return res</code></pre><p>思想：用三个下标<code>i,j,k</code>遍历所有可能。首先排序，然后不断缩小i、j和k的区间。</p><h2 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16 最接近的三数之和"></a>16 最接近的三数之和</h2><pre><code class="lang-cpp">class Solution {public:    int threeSumClosest(vector&lt;int&gt;&amp; nums, int target) {        const int size = nums.size();        if (size &lt;= 3) return std::accumulate(nums.begin(), nums.end(), 0); // 0是累加的初值        std::sort(nums.begin(), nums.end());        int result = nums[0] + nums[1] + nums[2]; // 初值        for (int i = 0; i &lt; size - 2; ++i) {            int j = i + 1;            int k = size - 1;            while (j &lt; k) {                int temp = nums[i] + nums[j] + nums[k];                if (std::abs(target - temp) &lt; std::abs(target - result)) {                    result = temp;                }                if (result == target) { // 直接找到了                    return result;                }                if (temp &gt; target) {                    --k; // temp太大，需要缩小右边界                } else {                    ++j; // temp太小，需要缩小左边界                }            }        }        return result;    }};</code></pre><p>思路：还是利用三个下标<code>i,j,k</code>遍历全部数组。中途不断保存和target最近的temp值。</p><h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18 四数之和"></a>18 四数之和</h2><pre><code class="lang-cpp">class Solution {public:    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {        sort(nums.begin(),nums.end());        vector&lt;vector&lt;int&gt; &gt; res;        if(nums.size()&lt;4) return res;        int a,b,c,d,_size=nums.size();        for(a=0;a&lt;_size-3;a++){            if(a&gt;0&amp;&amp;nums[a]==nums[a-1]) continue;      //确保nums[a] 改变了            for(b=a+1;b&lt;_size-2;b++){                if(b&gt;a+1&amp;&amp;nums[b]==nums[b-1])continue;   //确保nums[b] 改变了                c=b+1,d=_size-1;                while(c&lt;d){                    if(nums[a]+nums[b]+nums[c]+nums[d]&lt;target)                        c++;                    else if(nums[a]+nums[b]+nums[c]+nums[d]&gt;target)                        d--;                    else{                        res.push_back({nums[a],nums[b],nums[c],nums[d]});                        while(c&lt;d&amp;&amp;nums[c+1]==nums[c])      //确保nums[c] 改变了                            c++;                        while(c&lt;d&amp;&amp;nums[d-1]==nums[d])      //确保nums[d] 改变了                            d--;                        c++;                        d--;                    }                }            }        }        return res;    }};</code></pre><p>思路：四指针。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;见多了优秀的文章，再写博客的时候就会感叹自己的学识浅薄。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="algorithm" scheme="https://superlova.github.io/tags/algorithm/"/>
    
      <category term="Datawhale" scheme="https://superlova.github.io/tags/Datawhale/"/>
    
      <category term="leetcode" scheme="https://superlova.github.io/tags/leetcode/"/>
    
      <category term="search" scheme="https://superlova.github.io/tags/search/"/>
    
  </entry>
  
  <entry>
    <title>【竞赛打卡】数据挖掘实践——总结与反思</title>
    <link href="https://superlova.github.io/2020/08/25/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E6%80%BB%E7%BB%93%E4%B8%8E%E5%8F%8D%E6%80%9D/"/>
    <id>https://superlova.github.io/2020/08/25/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E6%80%BB%E7%BB%93%E4%B8%8E%E5%8F%8D%E6%80%9D/</id>
    <published>2020-08-25T15:28:03.000Z</published>
    <updated>2020-08-25T15:33:14.930Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>这次组队学习确实是自己不太擅长的领域。借着上次NLP组队学习的冲劲，本以为想在不熟悉的领域也能至少学点东西，但确实是小看了这次学习的难度。</p><p>回头来看，组队学习进入到特征工程的时候，我已经完全一脸懵逼了。我很想跟上大家的节奏，但是确实一个是没有时间，另一个是差太多了，已经进入了恐慌区，脑海里也是拒绝的心态。我知道这次组队学习已经彻底失败了。</p><p>唉！内心充满了挫败感。这次组队学习唯一的收获就是，获得了这次比赛的Baseline。自此之后我就要投入到秋招了，我曾参加过CV赛事、NLP赛事，再加上这个结构化赛事，我的比赛经历算是圆满了，接下来的日子就是研究Baseline、好好准备简历了，也该收收心了。</p><p>祝自己好运。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这次组队学习确实是自己不太擅长的领域。借着上次NLP组队学习的冲劲，本以为想在不熟悉的领域也能至少学点东西，但确实是小看了这次学习的难度。&lt;/p&gt;
&lt;p&gt;回头来看，组队学习进入到特征工程的时候，我已经完全一脸懵逼了。我很想跟上大家的节奏，
      
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Datawhale" scheme="https://superlova.github.io/tags/Datawhale/"/>
    
      <category term="Data Mining" scheme="https://superlova.github.io/tags/Data-Mining/"/>
    
      <category term="Time Series Analysis" scheme="https://superlova.github.io/tags/Time-Series-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>【竞赛打卡】数据挖掘实践——建模预测</title>
    <link href="https://superlova.github.io/2020/08/24/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E5%BB%BA%E6%A8%A1%E9%A2%84%E6%B5%8B/"/>
    <id>https://superlova.github.io/2020/08/24/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E5%BB%BA%E6%A8%A1%E9%A2%84%E6%B5%8B/</id>
    <published>2020-08-24T15:05:13.000Z</published>
    <updated>2020-08-24T15:41:46.921Z</updated>
    
    <content type="html"><![CDATA[<p>我也是加把劲骑士！<br><a id="more"></a></p><pre><code class="lang-py">import matplotlib.pyplot as pltimport pandas as pdimport numpy as npfrom tensorflow.keras.layers import Input, Conv1D, MaxPooling1D, Dense, Add, Dropout, Flatten, TimeDistributedfrom tensorflow.keras.models import Model, Sequentialfrom tensorflow.keras import activations, optimizers, regularizersfrom tensorflow.keras.callbacks import EarlyStoppingimport tensorflow.keras.backend as kbfrom tensorflow import kerasfrom sklearn.preprocessing import MinMaxScalerfrom sklearn.metrics import mean_squared_error, mean_absolute_errorfrom time import *user_balance = pd.read_csv(&#39;Purchase Redemption Data/user_balance_table.csv&#39;)df_tmp = user_balance.groupby([&#39;report_date&#39;])[&#39;total_purchase_amt&#39;, &#39;total_redeem_amt&#39;].sum()df_tmp.index = pd.to_datetime(df_tmp.index, format=&#39;%Y%m%d&#39;)holidays = (&#39;20130813&#39;, &#39;20130902&#39;, &#39;20131001&#39;, &#39;20131111&#39;, &#39;20130919&#39;, &#39;20131225&#39;, &#39;20140101&#39;, &#39;20140130&#39;, &#39;20140131&#39;,           &#39;20140214&#39;, &#39;20140405&#39;, &#39;20140501&#39;, &#39;20140602&#39;, &#39;20140802&#39;, &#39;20140901&#39;, &#39;20140908&#39;)def create_features(timeindex):    n = len(timeindex)    features = np.zeros((n, 4))    features[:, 0] = timeindex.day.values/31    features[:, 1] = timeindex.month.values/12    features[:, 2] = timeindex.weekday.values/6    for i in range(n):        if timeindex[i].strftime(&#39;%Y%m%d&#39;) in holidays:            features[i, 3] = 1    return featuresfeatures = create_features(df_tmp.index)september = pd.to_datetime([&#39;201409%02d&#39; % i for i in range(1, 31)])features_sep = create_features(september)scaler_pur = MinMaxScaler()scaler_red = MinMaxScaler()data_pur = scaler_pur.fit_transform(df_tmp.values[:, 0:1])data_red = scaler_red.fit_transform(df_tmp.values[:, 1:2])def create_dataset(data, back, forward=30):    n_samples = len(data) - back - forward + 1    X, Y = np.zeros((n_samples, back, data.shape[-1])), np.zeros((n_samples, forward, data.shape[-1]))    for i in range(n_samples):        X[i, ...] = data[i:i+back, :]        Y[i, ...] = data[i+back:i+back+forward, :]    return X, Ydef build_cnn(X_trn, lr, n_outputs, dropout_rate):    inputs = Input(X_trn.shape[1:])    z = Conv1D(64, 14, padding=&#39;valid&#39;, activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)(inputs)#     z = MaxPooling1D(2)(z)    z = Conv1D(128, 7, padding=&#39;valid&#39;, activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)(z)    z = MaxPooling1D(2)(z)    z = Conv1D(256, 3, padding=&#39;valid&#39;, activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)(z)    z = Conv1D(256, 3, padding=&#39;valid&#39;, activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)(z)    z = MaxPooling1D(2)(z)    z = Flatten()(z)    z = Dropout(dropout_rate)(z)    z = Dense(128, activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)(z)    z = Dropout(dropout_rate)(z)    z = Dense(84, activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)(z)    outputs = Dense(n_outputs)(z)    model = Model(inputs=inputs, outputs=outputs)    adam = optimizers.Adam(lr=lr)    model.compile(loss=&#39;mse&#39;, optimizer=adam, metrics=[&#39;mae&#39;])    model.summary()    return modelback = 60forward = 30X_pur_data, Y_pur_data = create_dataset(data_pur, back, forward)X_red_data, Y_red_data = create_dataset(data_red, back, forward)X_features, Y_features = create_dataset(features, back, forward)Y_features = np.concatenate((Y_features, np.zeros((Y_features.shape[0], back-forward, Y_features.shape[-1]))), axis=1)# X_pur, X_red = np.concatenate((X_pur_data, X_features, Y_features), axis=-1), np.concatenate((X_red_data, X_features, Y_features), axis=-1)# X_pur_trn, X_pur_val, X_red_trn, X_red_val = X_pur[:-forward, ...], X_pur[-1:, ...], X_red[:-forward, ...], X_red[-1:, ...]# Y_pur_trn, Y_pur_val, Y_red_trn, Y_red_val = Y_pur_data[:-forward, ...], Y_pur_data[-1:, ...], Y_red_data[:-forward, ...], Y_red_data[-1:, ...]Y_fea_sep = np.concatenate((features_sep, np.zeros((back-forward, features_sep.shape[-1]))), axis=0)# X_pur_tst = np.concatenate((data_pur[-back:, :], features[-back:, :], Y_fea_sep), axis=-1)[None, ...]# X_red_tst = np.concatenate((data_red[-back:, :], features[-back:, :], Y_fea_sep), axis=-1)[None, ...]X = np.concatenate((X_pur_data, X_red_data, X_features, Y_features), axis=-1)Y = np.concatenate((Y_pur_data, Y_red_data), axis=1)X_trn, X_val, Y_trn, Y_val = X[:-forward, ...], X[-1:, ...], Y[:-forward, ...], Y[-1:, ...]X_tst = np.concatenate((data_pur[-back:, :], data_red[-back:, :], features[-back:, :], Y_fea_sep), axis=-1)[None, ...]cnn_pur = build_cnn(X_trn, lr=0.0008, n_outputs=2*forward, dropout_rate=0.5)history = cnn_pur.fit(X_trn, Y_trn, batch_size=32, epochs=1000, verbose=2,                       validation_data=(X_val, Y_val),                     callbacks=[EarlyStopping(monitor=&#39;val_mae&#39;, patience=200, restore_best_weights=True)])plt.figure(figsize=(8, 5))plt.plot(history.history[&#39;mae&#39;], label=&#39;train mae&#39;)plt.plot(history.history[&#39;val_mae&#39;], label=&#39;validation mae&#39;)plt.ylim([0, 0.2])plt.legend()plt.show()def plot_prediction(y_pred, y_true):    plt.figure(figsize=(16,4))    plt.plot(np.squeeze(y_pred), label=&#39;prediction&#39;)    plt.plot(np.squeeze(y_true), label=&#39;true&#39;)    plt.legend()    plt.show()    print(&#39;MAE: %.3f&#39; % mean_absolute_error(np.squeeze(y_pred), np.squeeze(y_true)))pred = cnn.predict(X_val)plot_prediction(pred, Y_val)history = cnn.fit(X, Y, batch_size=32, epochs=500, verbose=2,                     callbacks=[EarlyStopping(monitor=&#39;mae&#39;, patience=30, restore_best_weights=True)])plt.figure(figsize=(8, 5))plt.plot(history.history[&#39;mae&#39;], label=&#39;train mae&#39;)plt.legend()plt.show()print(cnn.evaluate(X, Y, verbose=2))pred_tst = cnn.predict(X_tst)pur_sep = scaler_pur.inverse_transform(pred_tst[:, :forward].transpose())red_sep = scaler_red.inverse_transform(pred_tst[:, forward:].transpose())test_user = pd.DataFrame({&#39;report_date&#39;: [20140900 + i for i in range(1, 31)]})test_user[&#39;pur&#39;] = pur_sep.astype(&#39;int&#39;)test_user[&#39;red&#39;] = red_sep.astype(&#39;int&#39;)test_user.to_csv(&#39;submission.csv&#39;, encoding=&#39;utf-8&#39;, index=None, header=None)from google.colab import filesfiles.download(&quot;submission.csv&quot;)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我也是加把劲骑士！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Datawhale" scheme="https://superlova.github.io/tags/Datawhale/"/>
    
      <category term="Data Mining" scheme="https://superlova.github.io/tags/Data-Mining/"/>
    
      <category term="Time Series Analysis" scheme="https://superlova.github.io/tags/Time-Series-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>【竞赛打卡】数据挖掘实践——特征工程</title>
    <link href="https://superlova.github.io/2020/08/24/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    <id>https://superlova.github.io/2020/08/24/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/</id>
    <published>2020-08-24T15:04:54.000Z</published>
    <updated>2020-08-24T15:40:34.810Z</updated>
    
    <content type="html"><![CDATA[<p>我也是加把劲骑士！<br><a id="more"></a></p><p>数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。由此可见，特征工程在机器学习中占有相当重要的地位。在实际应用当中，可以说特征工程是机器学习成功的关键。</p><p>那特征工程是什么？</p><p>特征工程是利用数据领域的相关知识来创建能够使机器学习算法达到最佳性能的特征的过程。</p><p>特征工程又包含了 Data PreProcessing（数据预处理）、Feature Extraction（特征提取）、Feature Selection（特征选择）和 Feature construction（特征构造）等子问题，本章内容主要讨论特征构造的方法。</p><p>创造新的特征是一件十分困难的事情，需要丰富的专业知识和大量的时间。机器学习应用的本质基本上就是特征工程。<br>——Andrew Ng</p><p>对于时间型数据来说，即可以把它转换成连续值，也可以转换成离散值。</p><p>1.连续值时间特征<br>持续时间（单页浏览时长）；间隔时间；上次购买/点击离现在的时长；产品上线到现在经过的时长；2.离散值时间特征<br>1）时间特征拆解</p><p>年；月；日；时；分；数；一天中的第几分钟；星期几；一年中的第几天；一年中的第几个周；一天中哪个时间段：凌晨、早晨、上午、中午、下午、傍晚、晚上、深夜；一年中的哪个季度；</p><p>2）时间特征判断<br>是否闰年；是否月初；是否月末；是否季节初；是否季节末；是否年初；是否年尾；是否周末；是否公共假期；是否营业时间；两个时间间隔之间是否包含节假日/特殊日期；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我也是加把劲骑士！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Datawhale" scheme="https://superlova.github.io/tags/Datawhale/"/>
    
      <category term="Data Mining" scheme="https://superlova.github.io/tags/Data-Mining/"/>
    
      <category term="Time Series Analysis" scheme="https://superlova.github.io/tags/Time-Series-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>【竞赛打卡】leetcode打卡：查找算法</title>
    <link href="https://superlova.github.io/2020/08/24/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91leetcode%E6%89%93%E5%8D%A1%EF%BC%9A%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    <id>https://superlova.github.io/2020/08/24/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91leetcode%E6%89%93%E5%8D%A1%EF%BC%9A%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</id>
    <published>2020-08-24T00:23:08.000Z</published>
    <updated>2020-08-24T14:59:07.827Z</updated>
    
    <content type="html"><![CDATA[<p>见多了优秀的文章，再写博客的时候就会感叹自己的学识浅薄。<br><a id="more"></a></p><h2 id="leetcode-35-搜索插入位置"><a href="#leetcode-35-搜索插入位置" class="headerlink" title="leetcode 35 搜索插入位置"></a>leetcode 35 搜索插入位置</h2><p>给定一个无重复元素的排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>思路：简单的二分搜索。注意边界条件。注意初始化条件是<code>L = 0, R = nums.size()</code>。</p><p>代码：</p><pre><code class="lang-cpp">class Solution {public:    int searchInsert(vector&lt;int&gt;&amp; nums, int target) {        int L = 0, R = nums.size();        if (nums.empty() || target &lt; nums[L]) return 0;        if (nums[R-1] &lt; target) return R;        while (L &lt;= R) {            int i = (L + R) / 2;            if (nums[i] &lt; target) {                L = i + 1;            } else if (target &lt; nums[i]) {                R = i - 1;            } else if (target == nums[i]){                return i;            } //else         }        return L;    }};</code></pre><h2 id="leetcode-202-快乐数"><a href="#leetcode-202-快乐数" class="headerlink" title="leetcode 202 快乐数"></a>leetcode 202 快乐数</h2><p>先分享一下直观的解法</p><p>检查一个数是快乐数，就不断执行<code>n=compute(n)</code>这一步，然后检查n是否为1就行了。但是一旦一个数不是快乐数，则必定是陷于某个数字循环中。比如2这个非快乐数，它的计算过程如下：</p><pre><code>241637588914542204 &lt;- 注意这里的4已经出现过</code></pre><p>我的思路很简单。只需将出现过的n都保存在一个字典中，如果新计算的n已经存在于字典中了，那就意味着陷入了计算循环，非快乐数。</p><pre><code class="lang-cpp">class Solution {public:    bool isHappy(int n) {        unordered_map&lt;int, int&gt; hash;        while (n != 1) {            n = compute(n);            auto iter = hash.find(n);            if (iter != hash.end()) return false;            ++hash[n];        }        return true;    }    int compute(int n) {        int res = 0, bit = 0;        while (n) {            bit = n % 10;            n = n / 10;            res += bit * bit;         }        return res;    }};</code></pre><p>这个问题还可以转化为检测链表是否存在环路的问题。就可以使用快慢指针法。<code>compute</code>函数不变，只需把主函数部分变成：</p><pre><code class="lang-cpp">class Solution {public:    bool isHappy(int n) {        int slow = n;        int fast = compute(n);        while (slow != fast &amp;&amp; fast != 1) {            slow = compute(slow);            fast = compute(compute(fast));        }        return fast == 1;    }    int compute(int n) {        int res = 0, bit = 0;        while (n) {            bit = n % 10;            n = n / 10;            res += bit * bit;         }        return res;    }};</code></pre><h2 id="leetcode-205-同构字符串"><a href="#leetcode-205-同构字符串" class="headerlink" title="leetcode 205 同构字符串"></a>leetcode 205 同构字符串</h2><p>将两个字符串翻译为数字，最后比较数字是否相同即可。</p><pre><code class="lang-cpp">class Solution {public:    bool isIsomorphic(string s, string t) {        s = translate(s);        t = translate(t);        return s == t;    }    string translate(string s) {        int count = 0;        unordered_map&lt;char, int&gt; hash;        string res = &quot;&quot;;        for (auto c : s) {            auto iter = hash.find(c);            if (iter != hash.end()) res += std::to_string(iter-&gt;second);            else hash[c] = count++;        }        return res;    }};</code></pre><h2 id="leetcode-242-有效的字母异位词"><a href="#leetcode-242-有效的字母异位词" class="headerlink" title="leetcode 242 有效的字母异位词"></a>leetcode 242 有效的字母异位词</h2><p>总体思路还是哈希表，保存两个字符串出现的字符类别和次数，如若相等则true。</p><p>可以进一步优化，即使用一个哈希表，遍历s的时候构建哈希，遍历t的时候删减对应哈希的元素，如果哈希表的数值低于0，就说明为false。</p><p>万一删减不到零呢？其实这种情况是不会出现的，因为我们在循环伊始，检查两字符串的长度必须相同。</p><pre><code class="lang-cpp">class Solution {public:    bool isAnagram(string s, string t) {        if (s.size() != t.size()) return false;        vector&lt;int&gt; table(26, 0);        for (auto c : s) {            ++table[c - &#39;a&#39;];        }        for (auto c : t) {            --table[c - &#39;a&#39;];            if (table[c - &#39;a&#39;] &lt; 0) return false;        }        return true;    }};</code></pre><h2 id="leetcode-290-单词规律"><a href="#leetcode-290-单词规律" class="headerlink" title="leetcode 290 单词规律"></a>leetcode 290 单词规律</h2><p>还是将其翻译成中间表示，然后比较中间表示是否同一。</p><pre><code class="lang-cpp">#include&lt;regex&gt;#include &lt;iterator&gt;class Solution {public:    bool wordPattern(string pattern, string str) {        vector&lt;string&gt; str_array;        std::regex r(&quot;\\s+&quot;);        std::sregex_token_iterator pos(str.cbegin(), str.cend(), r, -1); // -1代表你对正则表达式匹配的内容不感兴趣        std::sregex_token_iterator end;        for (; pos != end; ++pos) {            str_array.push_back(*pos);        }        if (pattern.size() != str_array.size()) return false;        unordered_map&lt;char, int&gt; hash_char;        unordered_map&lt;string, int&gt; hash_string;        for (int i = 0; i &lt; pattern.size(); ++i) {            auto iter_char = hash_char.find(pattern[i]);            auto iter_string = hash_string.find(str_array[i]);            if (iter_char != hash_char.end() &amp;&amp; iter_string != hash_string.end()) {                if (iter_char-&gt;second != iter_string-&gt;second) return false;            } else if (iter_char == hash_char.end() &amp;&amp; iter_string == hash_string.end()) {                hash_char[pattern[i]] = i;                hash_string[str_array[i]] = i;            } else return false;        }        return true;    }};</code></pre><h2 id="leetcode-349-两个数组的交集"><a href="#leetcode-349-两个数组的交集" class="headerlink" title="leetcode 349 两个数组的交集"></a>leetcode 349 两个数组的交集</h2><p>显然是用hash。</p><pre><code class="lang-cpp">class Solution {public:    vector&lt;int&gt; intersection(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {        if (nums1.empty() || nums2.empty()) return {};        unordered_map&lt;int, int&gt; hash;        vector&lt;int&gt; res;        for (auto c : nums1) {            hash[c] = 1;        }        for (auto c : nums2) {            auto iter = hash.find(c);            if (iter != hash.end()) hash[c] = 0;        }        for (auto iter = hash.begin(); iter != hash.end(); ++iter) {            if (iter-&gt;second == 0) res.push_back(iter-&gt;first);        }        return res;    }};</code></pre><h2 id="leetcode-350-两个数组的交集-II"><a href="#leetcode-350-两个数组的交集-II" class="headerlink" title="leetcode 350 两个数组的交集 II"></a>leetcode 350 两个数组的交集 II</h2><p>带重复元素了。由于hash本身就可以记录每个元素出现的次数，那么我们每当发现一个元素，执行的不是<code>hash[nums[i]] = 1</code>，而是<code>hash[nums[i]]++</code>。</p><pre><code class="lang-cpp">class Solution {public:    vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {        if (nums1.empty() || nums2.empty()) return {};        unordered_map&lt;int, int&gt; hash;        vector&lt;int&gt; res;        for (int i = 0; i &lt; nums1.size(); ++i) {            ++hash[nums1[i]];        }        for (int i = 0; i &lt; nums2.size(); ++i) {            auto iter = hash.find(nums2[i]);            if (iter != hash.end() &amp;&amp; iter-&gt;second != 0) {                res.push_back(nums2[i]);                --iter-&gt;second;            }        }        return res;    }};</code></pre><h2 id="leetcode-451-根据字符出现频率排序"><a href="#leetcode-451-根据字符出现频率排序" class="headerlink" title="leetcode 451 根据字符出现频率排序"></a>leetcode 451 根据字符出现频率排序</h2><pre><code class="lang-cpp">class Solution {public:    string frequencySort(string s) {        if (s.empty()) return &quot;&quot;;        unordered_map&lt;char, int&gt; hash;        for (auto c : s) {            ++hash[c];        }        sort(s.begin(), s.end(), [&amp;hash](char lhs, char rhs) {            return hash[lhs] &gt; hash[rhs] || (hash[lhs] == hash[rhs] &amp;&amp; lhs &lt; rhs);        });        return s;    }};</code></pre><h2 id="leetcode-540-有序数组中的单一元素"><a href="#leetcode-540-有序数组中的单一元素" class="headerlink" title="leetcode 540 有序数组中的单一元素"></a>leetcode 540 有序数组中的单一元素</h2><pre><code class="lang-cpp">class Solution {public:    int singleNonDuplicate(vector&lt;int&gt;&amp; nums) {        if (nums.size() == 1) return nums[0];        return helper(nums, 0, nums.size()-1);    }    int helper(vector&lt;int&gt;&amp; nums, int start, int end) {        if (end == start) return nums[start];        int mid = start + (end - start) / 2;        if (nums[mid-1] == nums[mid]) { // 中点左边相同，须删除中点和左边元素            int left_len = mid - start - 1;            int right_len = end - mid;            if (left_len % 2 != 0) { // 如果删除后左边长度为奇数则递归左边                return helper(nums, start, mid-2);            } else { // 如果删除后右边长度为奇数则递归右边                return helper(nums, mid+1, end);            }        } else if (nums[mid] == nums[mid+1]) {  // 中点右边相同，须删除中点和右边元素            int left_len = mid - start;            int right_len = end - mid - 1;            if (left_len % 2 != 0) { // 如果删除后左边长度为奇数则递归左边                return helper(nums, start, mid-1);            } else { // 如果删除后右边长度为奇数则递归右边                return helper(nums, mid+2, end);            }        } else return nums[mid];    }};</code></pre><h2 id="leetcode-410-分割数组的最大值"><a href="#leetcode-410-分割数组的最大值" class="headerlink" title="leetcode 410 分割数组的最大值"></a>leetcode 410 分割数组的最大值</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;见多了优秀的文章，再写博客的时候就会感叹自己的学识浅薄。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="algorithm" scheme="https://superlova.github.io/tags/algorithm/"/>
    
      <category term="Datawhale" scheme="https://superlova.github.io/tags/Datawhale/"/>
    
      <category term="leetcode" scheme="https://superlova.github.io/tags/leetcode/"/>
    
      <category term="searching" scheme="https://superlova.github.io/tags/searching/"/>
    
  </entry>
  
  <entry>
    <title>【竞赛打卡】leetcode打卡：动态规划</title>
    <link href="https://superlova.github.io/2020/08/23/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91leetcode%E6%89%93%E5%8D%A1%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://superlova.github.io/2020/08/23/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91leetcode%E6%89%93%E5%8D%A1%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2020-08-22T23:52:25.000Z</published>
    <updated>2020-08-23T07:56:40.733Z</updated>
    
    <content type="html"><![CDATA[<p>见多了优秀的文章，再写博客的时候就会感叹自己的学识浅薄。<br><a id="more"></a></p><h2 id="leetcode-198-打家劫舍"><a href="#leetcode-198-打家劫舍" class="headerlink" title="leetcode 198 打家劫舍"></a>leetcode 198 打家劫舍</h2><p>动态规划</p><p>设置<code>dp[i]</code>为前i个元素中打劫所得最高金额</p><p>构建状态转移方程：</p><pre><code class="lang-cpp">dp[i] = max(dp[i-1], dp[i-2]+nums[i]);</code></pre><p>边界条件：</p><pre><code class="lang-cpp">dp[0] = nums[0];dp[1] = max(nums[0], nums[1]);</code></pre><p>代码：</p><pre><code class="lang-cpp">class Solution {public:    int rob(vector&lt;int&gt;&amp; nums) {        if (nums.empty()) return 0;        if (nums.size() == 1) return nums[0];        vector&lt;int&gt; dp(nums.size(), 0);        dp[0] = nums[0];        dp[1] = max(nums[0], nums[1]);        for (int i = 2; i &lt; nums.size(); ++i) {            dp[i] = max(dp[i-1], dp[i-2]+nums[i]);        }        return dp[nums.size()-1];    }};</code></pre><h2 id="leetcode-674-最长连续递增子序列"><a href="#leetcode-674-最长连续递增子序列" class="headerlink" title="leetcode 674 最长连续递增子序列"></a>leetcode 674 最长连续递增子序列</h2><p>不必使用动态规划，直接一遍遍历，碰到<code>nums[i] &lt; nums[i+1]</code>就递增计数器，保留计数器最大值即可：</p><pre><code class="lang-cpp">class Solution {public:    int findLengthOfLCIS(vector&lt;int&gt;&amp; nums) {        if (nums.empty()) return 0;        int count = 1;        int maxCount = 1;        for (int i = 0; i &lt; nums.size() - 1; ++i) {            if (nums[i] &lt; nums[i+1]) {                ++count;                maxCount = max(count, maxCount);            } else {                count = 1;            }        }        return maxCount;    }};</code></pre><p>后来我悟了，这就是动态规划，只不过我利用<code>maxCount</code>来代替了dp数组。我真是个天才（误）！</p><h2 id="leetcode-5-最长回文子串"><a href="#leetcode-5-最长回文子串" class="headerlink" title="leetcode 5 最长回文子串"></a>leetcode 5 最长回文子串</h2><p>本来是想定义dp[i][j]，表达字符串从i到j的子串中的最长回文子串的。后来想想这样定义不合适，不如把dp定义为一个bool数组，用来标记从i到j子串是否为回文串即可。</p><p>状态转移关系：dp[i][j] = dp[i+1][j-1] &amp;&amp; (s[i] == s[j])</p><p>即s[i:j]为回文串的条件为s[i+1][j-1]为回文串，且s[i] == s[j]</p><p>边界条件：<br>dp[i][j] = true if i == j<br>dp[i][j] = false if i &gt; j<br>dp[i][i+1] = (s[i] == s[i+1])</p><p>最后遍历所有dp[i][j]=true的项，返回最长的子串即可</p><p>需要注意的一点：我们在遍历双层循环的时候，应该j在外，i在内。想想为什么？如果循环结构是这样的：</p><pre><code class="lang-cpp">for (int i = 0; i &lt; s.size(); ++i) {    for (int j = i+1; j &lt; s.size(); ++j) {        // TODO    }}</code></pre><p>那 i、j的变化为：<br>0,0<br>0,1<br>0,2<br>0,3-&gt;这里就不对了，因为dp[0][3]需要用到dp[1][2]的值。而i=1时的所有dp都还没求呢。</p><p>代码：</p><pre><code class="lang-cpp">class Solution {public:    string longestPalindrome(string s) {        if (s.empty()) return &quot;&quot;;        int size = s.size();        vector&lt;vector&lt;bool&gt;&gt; dp(size, vector&lt;bool&gt;(size, false));        string ans = &quot;&quot;;        for (int j = 0; j &lt; size; ++j) {            for (int i = 0; i &lt;= j; ++i) {                if (j == i) dp[i][j] = true;                else if (j == i+1) dp[i][j] = (s[i] == s[j]);                else dp[i][j] = (dp[i+1][j-1]) &amp;&amp; (s[i] == s[j]);                if (dp[i][j] &amp;&amp; ans.size() &lt; j-i+1) ans = s.substr(i, j-i+1);            }        }        return ans;    }};</code></pre><h2 id="leetcode-213-打家劫舍2"><a href="#leetcode-213-打家劫舍2" class="headerlink" title="leetcode 213 打家劫舍2"></a>leetcode 213 打家劫舍2</h2><p>打家劫舍升级版，贼不能同时打劫头尾。</p><p>也好办，拆分成两个动态规划，一个规定不能打劫nums[0]，另一个规定不能打劫nums[size-1]，最后返回更大的那个即可。</p><p>代码：</p><pre><code class="lang-cpp">class Solution {public:    int rob(vector&lt;int&gt;&amp; nums) {        if (nums.empty()) return 0;        int size = nums.size();        if (size == 1) return nums[0];        if (size == 2) return max(nums[0], nums[1]);        vector&lt;int&gt; dp_robfirst(size, 0);        vector&lt;int&gt; dp_roblast(size, 0);        dp_robfirst[0] = nums[0];        dp_robfirst[1] = max(nums[0], nums[1]);        for (int i = 2; i &lt; size-1; ++i) {            dp_robfirst[i] = max(dp_robfirst[i-1], dp_robfirst[i-2] + nums[i]);        }        dp_roblast[0] = 0;        dp_roblast[1] = nums[1];        for (int i = 2; i &lt; size; ++i) {            dp_roblast[i] = max(dp_roblast[i-1], dp_roblast[i-2] + nums[i]);        }        return max(dp_robfirst[size-2], dp_roblast[size-1]);    }};</code></pre><h2 id="leetcode-516-最长回文子序列"><a href="#leetcode-516-最长回文子序列" class="headerlink" title="leetcode 516 最长回文子序列"></a>leetcode 516 最长回文子序列</h2><p>这次的dp含义为从i到j子串中最长的回文序列长度。</p><p>转移方程：</p><p>dp[i][j] = dp[i+1][j-1] if s[i] == s[j]<br>dp[i][j] = max(dp[i+1][j], dp[i][j-1]) if s[i] != s[j]</p><p>注意，i从大遍历到小，j从小遍历到大。最后返回dp[0][size-1]</p><p>边界条件：dp[i][j] = 1 if i == j</p><p>代码：</p><pre><code class="lang-cpp">class Solution {public:    int longestPalindromeSubseq(string s) {        if (s.empty()) return 0;        int size = s.size();        vector&lt;vector&lt;int&gt;&gt; dp(size, vector&lt;int&gt;(size, 0));        for (int i = size-1; i &gt;= 0; --i) {            for (int j = i; j &lt; size; ++j) {                if (i == j) dp[i][j] = 1;                else if (s[i] == s[j]) dp[i][j] = dp[i+1][j-1] + 2;                else dp[i][j] = max(dp[i+1][j], dp[i][j-1]);            }        }        return dp[0][size-1];    }};</code></pre><h2 id="leetcode-72-编辑距离"><a href="#leetcode-72-编辑距离" class="headerlink" title="leetcode 72 编辑距离"></a>leetcode 72 编辑距离</h2><p>代码：</p><pre><code class="lang-cpp">class Solution {public:    int minDistance(string word1, string word2) {        int M = word1.size();        int N = word2.size();        // if (word1.empty() || word2.empty()) return abs(M-N);        vector&lt;vector&lt;int&gt;&gt; dp(M+1, vector&lt;int&gt;(N+1, 0));        //initial        for (int i = 0; i &lt;= M; ++i) {            dp[i][0] = i;        }        for (int i = 0; i &lt;= N; ++i) {            dp[0][i] = i;        }        //dp        for (int i = 1; i &lt;= M; ++i) {            for (int j = 1; j &lt;= N; ++j) {                if (word1[i-1] == word2[j-1]) {                    dp[i][j] = min(dp[i - 1][j - 1], 1 + dp[i - 1][j]);                    dp[i][j] = min(dp[i][j], 1 + dp[i][j - 1]);                } else {                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j]);                    dp[i][j] = 1 + min(dp[i][j], dp[i][j - 1]);                }            }        }        return dp[M][N];    }};</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;见多了优秀的文章，再写博客的时候就会感叹自己的学识浅薄。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="algorithm" scheme="https://superlova.github.io/tags/algorithm/"/>
    
      <category term="Datawhale" scheme="https://superlova.github.io/tags/Datawhale/"/>
    
      <category term="leetcode" scheme="https://superlova.github.io/tags/leetcode/"/>
    
      <category term="Dynamic Programming" scheme="https://superlova.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>【竞赛打卡】数据挖掘实践——时间序列模型</title>
    <link href="https://superlova.github.io/2020/08/22/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/"/>
    <id>https://superlova.github.io/2020/08/22/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-08-22T15:40:04.000Z</published>
    <updated>2020-08-22T15:43:49.737Z</updated>
    
    <content type="html"><![CDATA[<p>不要停下来啊！<br><a id="more"></a><br>AR模型是自回归模型，AutoRegression的简称。是一种较为朴素的时间序列数据处理方法，利用同一变量的前n期来预测本期的变量的数值，并且假定为线性关系。这种分析方法中，自变量不是其他的影响因素，而是变量本身的历史数据，利用xt-n来预测xt，因此被称为自回归。</p><p>MA模型：移动平均模型将序列{xt}表示为白噪声的线性加权。</p><p>在一个平稳的随机过程中，如果既有自回归的特性，又有移动平均过程的特性，则需要对两个模型进行混合使用，也即是较为普遍的ARMA模型，一般记为ARMA(p,q)。</p><p>ARIMA(p,d,q)是差分自回归移动平均模型，是运用最为广泛的一种时间序列分析模型。p,q的意义不变，其中d的含义是将时间序列化为平稳时间序列所做的差分次数。</p><p>在建立时间序列的模型后，我们要对时间序列数据进行多重检验，以确定该数据符合我们的统计学上的分析准则。主要的检验要观察数据的自相关性，阶数识别和单位根检验（ADF检验）。对于ARMA模型来说，最难的步骤是进行阶数的识别。ADF检验是时间序列中最为重要的检验之一，帮助我们准确判断时间序列数据是否平稳，是为后期的Johansen 检验、Granger 检验等的基础。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不要停下来啊！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Datawhale" scheme="https://superlova.github.io/tags/Datawhale/"/>
    
      <category term="Data Mining" scheme="https://superlova.github.io/tags/Data-Mining/"/>
    
      <category term="Time Series Analysis" scheme="https://superlova.github.io/tags/Time-Series-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>【竞赛打卡】数据挖掘实践——时间序列规则</title>
    <link href="https://superlova.github.io/2020/08/22/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E8%A7%84%E5%88%99/"/>
    <id>https://superlova.github.io/2020/08/22/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E8%A7%84%E5%88%99/</id>
    <published>2020-08-22T15:38:15.000Z</published>
    <updated>2020-08-22T15:43:47.259Z</updated>
    
    <content type="html"><![CDATA[<p>不要停下来啊！<br><a id="more"></a></p><p>时间序列基本规则法<br>提取时间序列的周期性特征进行预测，参考：时间序列规则法快速入门<br>观察序列，当序列存在周期性时，可以用线性回归-利用时间特征做线性回归做为baseline</p><p>时间序列是指将同一统计指标的数值按其发生的时间先后顺序排列而成的数列。</p><p>时间序列分析的主要目的是根据已有的历史数据对未来进行预测。与面板数据不同，面板数据侧重于同一时间点不同样本的数值，而时间序列侧重于同一统计指标在时间的不同点的数值。时间序列有两个重要指标，一个是资料所属的时间，另一个是时间上的统计指标数值。时间序列可以描述社会经济现象在不同时间的发展状态和过程，也可以根据历史数据进行合理的未来推测。</p><p>一般地，我们认为一个随机游走的变量会服从正态分布。</p><p>提取时间的周期性特点做为特征，此时训练集每条样本为”时间特征-&gt;目标值”，时间序列的依赖关系被剔除，不需要严格依赖滑窗截取训练样本。常见是将时间用0-1哑变量表达，有以下若干种特征：</p><ul><li>将星期转化为了0-1变量，从周一至周天，独热编码共7个变量</li><li>将节假日转化为0-1变量，视具体节假日数目，可简单分为两类，”有假日”-“无假日”，独热编码共2个变量；或赋予不同编码值，如区分国庆、春节、劳动节等使用1、2、3表示</li><li>将月初转化为0-1变量，简单分两类表示为”是月初”-“非月初”，共2个特征</li><li>类似的月中、月初可以转化为0-1变量</li><li>控制时间粒度，区分是weekday or weekend</li></ul><p>按列提取中位数是一种简单而有效的提取周期因子的方法。中位数十分鲁棒，不受极端值的影响。但中位数损失了很多信息。实践中，可以在此基础上进一步优化。比如可以提取一个均值和一个中位数，然后将均值和中位数融合。融合的比例按照测试集的表现来确定。也可以根据与预测周的时间距离来赋予不同的权重。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不要停下来啊！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Datawhale" scheme="https://superlova.github.io/tags/Datawhale/"/>
    
      <category term="Data Mining" scheme="https://superlova.github.io/tags/Data-Mining/"/>
    
      <category term="Time Series Analysis" scheme="https://superlova.github.io/tags/Time-Series-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>【竞赛打卡】数据挖掘实践——数据探索和分析</title>
    <link href="https://superlova.github.io/2020/08/20/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E6%8E%A2%E7%B4%A2%E5%92%8C%E5%88%86%E6%9E%90/"/>
    <id>https://superlova.github.io/2020/08/20/%E3%80%90%E7%AB%9E%E8%B5%9B%E6%89%93%E5%8D%A1%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E6%8E%A2%E7%B4%A2%E5%92%8C%E5%88%86%E6%9E%90/</id>
    <published>2020-08-20T15:40:07.000Z</published>
    <updated>2020-08-20T15:49:38.181Z</updated>
    
    <content type="html"><![CDATA[<p>我也是加把劲骑士！<br><a id="more"></a></p><pre><code class="lang-py">file_names = glob.glob(&#39;Purchase Redemption Data/*.csv&#39;)file_names[&#39;Purchase Redemption Data/mfd_bank_shibor.csv&#39;, &#39;Purchase Redemption Data/comp_predict_table.csv&#39;, &#39;Purchase Redemption Data/user_profile_table.csv&#39;, &#39;Purchase Redemption Data/mfd_day_share_interest.csv&#39;, &#39;Purchase Redemption Data/user_balance_table.csv&#39;]</code></pre><h2 id="1-用户信息表-user-profile-table"><a href="#1-用户信息表-user-profile-table" class="headerlink" title="1. 用户信息表 user_profile_table"></a>1. 用户信息表 user_profile_table</h2><p>我们总共随机抽取了约 3 万用户。</p><p>其中部分用户在 2014 年 9 月份第一次出现，这部分用户只在测试数据中（真的太鉴了这个）。</p><p>因此用户信息表是约 2.8 万 个用户的基本数据，在原始数据的基础上处理后，主要包含了用户的性别、城市和星座。</p><p><img src="/2020/08/20/【竞赛打卡】数据挖掘实践——数据探索和分析/2020-08-20-23-43-55.png" srcset="/img/loading.gif" alt></p><h2 id="2-用户申购赎回数据表-user-balance-table"><a href="#2-用户申购赎回数据表-user-balance-table" class="headerlink" title="2. 用户申购赎回数据表 user_balance_table"></a>2. 用户申购赎回数据表 user_balance_table</h2><p>里面有 20130701 至 20140831 申购和赎回信息、以及所有的子类目信息。</p><p>数据经过脱敏处理。脱敏之后的数据，基本保持了原数据趋势。</p><p>数据主要包括用户操作时间和操作记录，其中操作记录包括申购和赎回两个部分。</p><p>金额的单位是分，即 0.01 元人民币。 如果用户今日消费总量为0，即consume_amt=0，则四个字类目为空。</p><div class="table-container"><table><thead><tr><th>字段名称</th><th>含义</th></tr></thead><tbody><tr><td>report_date</td><td>日期</td></tr><tr><td>tBalance</td><td>今日余额</td></tr><tr><td>yBalance</td><td>昨日余额</td></tr><tr><td>total_purchase_amt</td><td>今日总购买量 = 直接购买 + 收益</td></tr><tr><td>direct_purchase_amt</td><td>今日直接购买量</td></tr><tr><td>purchase_bal_amt</td><td>今日支付宝余额购买量</td></tr><tr><td>purchase_bank_amt</td><td>今日银行卡购买量</td></tr><tr><td>total_redeem_amt</td><td>今日总赎回量 = 消费 + 转出</td></tr><tr><td>consume_amt</td><td>今日消费总量</td></tr><tr><td>transfer_amt</td><td>今日转出总量</td></tr><tr><td>tftobal_amt</td><td>今日转出到支付宝余额总量</td></tr><tr><td>tftocard_amt</td><td>今日转出到银行卡总量</td></tr><tr><td>share_amt</td><td>今日收益</td></tr><tr><td>category1</td><td>今日类目 1 消费总额</td></tr><tr><td>category2</td><td>今日类目 2 消费总额</td></tr><tr><td>category3</td><td>今日类目 3 消费总额</td></tr><tr><td>category4</td><td>今日类目 4 消费总额</td></tr></tbody></table></div><p><img src="/2020/08/20/【竞赛打卡】数据挖掘实践——数据探索和分析/2020-08-20-23-47-13.png" srcset="/img/loading.gif" alt></p><p>注 1 ：上述的数据都是经过脱敏处理的，收益为重新计算得到的，计算方法按照简化后的计算方式处理，具体计算方式在下节余额宝收益计算方式中描述。</p><p>注 2 ：脱敏后的数据保证了今日余额 = 昨日余额 + 今日申购 - 今日赎回，不会出现负值。</p><h2 id="3-收益率表-mfd-day-share-interest"><a href="#3-收益率表-mfd-day-share-interest" class="headerlink" title="3. 收益率表 mfd_day_share_interest"></a>3. 收益率表 mfd_day_share_interest</h2><p>收益表为余额宝在 14 个月内的收益率表 。</p><p><img src="/2020/08/20/【竞赛打卡】数据挖掘实践——数据探索和分析/2020-08-20-23-47-55.png" srcset="/img/loading.gif" alt></p><div class="table-container"><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>mfd_date</td><td>日期</td></tr><tr><td>mfd_daily_yield</td><td>万份收益，即 1 万块钱的收益。</td></tr><tr><td>mfd_7daily_yield</td><td>七日年化收益率（ % ）</td></tr></tbody></table></div><h2 id="4-上海银行间同业拆放利率（Shibor）表-df-mfd-bank-shibor"><a href="#4-上海银行间同业拆放利率（Shibor）表-df-mfd-bank-shibor" class="headerlink" title="4. 上海银行间同业拆放利率（Shibor）表 df_mfd_bank_shibor"></a>4. 上海银行间同业拆放利率（Shibor）表 df_mfd_bank_shibor</h2><p>银行间拆借利率表是 14 个月期间银行之间的拆借利率（皆为年化利率）</p><p><img src="/2020/08/20/【竞赛打卡】数据挖掘实践——数据探索和分析/2020-08-20-23-48-31.png" srcset="/img/loading.gif" alt></p><div class="table-container"><table><thead><tr><th>列名</th><th>类型</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>mfd_date</td><td>String</td><td>日期</td><td>20140102</td></tr><tr><td>Interest_O_N</td><td>Double</td><td>隔夜利率（%）</td><td>2.8</td></tr><tr><td>Interest_1_W</td><td>Double</td><td>1周利率（%）</td><td>4.25</td></tr><tr><td>Interest_2_W</td><td>Double</td><td>2周利率（%）</td><td>4.9</td></tr><tr><td>Interest_1_M</td><td>Double</td><td>1个月利率（%）</td><td>5.04</td></tr><tr><td>Interest_3_M</td><td>Double</td><td>3个月利率（%）</td><td>4.91</td></tr><tr><td>Interest_6_M</td><td>Double</td><td>6个月利率（%）</td><td>4.79</td></tr><tr><td>Interest_9_M</td><td>Double</td><td>9个月利率（%）</td><td>4.76</td></tr><tr><td>Interest_1_Y</td><td>Double</td><td>1年利率（%）</td><td>4.78</td></tr></tbody></table></div><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="收益计算方式"><a href="#收益计算方式" class="headerlink" title="收益计算方式"></a>收益计算方式</h2><p>本赛题的余额宝收益方式，主要基于实际余额宝收益计算方法，但是进行了一定的简化，此处计算简化的地方如下：</p><p>首先，收益计算的时间不再是会计日，而是自然日，以 0 点为分隔，如果是 0 点之前转入或者转出的金额算作昨天的，如果是 0 点以后转入或者转出的金额则算作今天的。</p><p>然后，收益的显示时间，即实际将第一份收益打入用户账户的时间为如下表格，以周一转入周三显示为例，如果用户在周一存入 10000 元，即 1000000 分，那么这笔金额是周一确认，周二是开始产生收益，用户的余额还是 10000 元，在周三将周二产生的收益打入到用户的账户中，此时用户的账户中显示的是 10001.1 元，即 1000110 分。其他时间的计算按照表格中的时间来计算得到。</p><div class="table-container"><table><thead><tr><th>转入时间</th><th>首次显示收益时间</th></tr></thead><tbody><tr><td>周一</td><td>周三</td></tr><tr><td>周二</td><td>周四</td></tr><tr><td>周三</td><td>周五</td></tr><tr><td>周四</td><td>周六</td></tr><tr><td>周五</td><td>下周二</td></tr><tr><td>周六</td><td>下周三</td></tr><tr><td>周天</td><td>下周三</td></tr></tbody></table></div><h2 id="提交格式"><a href="#提交格式" class="headerlink" title="提交格式"></a>提交格式</h2><div class="table-container"><table><thead><tr><th>字段</th><th>类型</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>report_date</td><td>bigint</td><td>日期</td><td>20140901</td></tr><tr><td>purchase</td><td>bigint</td><td>申购总额</td><td>40000000</td></tr><tr><td>redeem</td><td>bigint</td><td>赎回总额</td><td>30000000</td></tr></tbody></table></div><p><img src="/2020/08/20/【竞赛打卡】数据挖掘实践——数据探索和分析/2020-08-20-23-49-17.png" srcset="/img/loading.gif" alt></p><p>每一行数据是一天对申购、赎回总额的预测值， 2014 年 9 月每天一行数据，共 30 行数据。 Purchase 和 redeem 都是金额数据，精确到分，而不是精确到元。</p><p>评分数据格式要求与“选手结果数据样例文件”一致，结果表命名为：tc_comp_predict_table， 字段之间以逗号为分隔符</p><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><p>评估指标的设计主要期望选手对未来 30 天内每一天申购和赎回的总量数据预测的越准越好，同时考虑到可能存在的多种情况。</p><p>譬如有些选手在 30 天中 29 天预测都是非常精准的但是某一天预测的结果可能误差很大，而有些选手在 30 天中每天的预测都不是很精准误差较大，如果采用绝对误差则可能导致前者的成绩比后者差，而在实际业务中可能更倾向于前者。</p><p>所以最终选用积分式的计算方法：每天的误差选用相对误差来计算，然后根据用户预测申购和赎回的相对误差，通过得分函数映射得到一个每天预测结果的得分，将 30 天内的得分汇总，然后结合实际业务的倾向，对申购赎回总量预测的得分情况进行加权求和，得到最终评分。具体的操作如下：</p><p>1) 计算所有用户在测试集上每天的申购及赎回总额与实际情况总额的误差。</p><p><img src="https://gtms02.alicdn.com/tps/i2/TB1UMhaHVXXXXbWXpXXmP_sPXXX-372-168.png" srcset="/img/loading.gif" alt></p><p>2) 申购预测得分与 Purchasei 相关，赎回预测得分与 Redeemi 相关 , 误差与得分之间的计算公式不公布，但保证该计算公式为单调递减的，即误差越小，得分越高，误差与大，得分越低。当第 i 天的申购误差 Purchasei =0 ，这一天的得分为 10 分；当 Purchasei &gt; 0.3 ，其得分为 0 。</p><p>3) 最后公布总积分 = 申购预测得分 <em>45%+ 赎回预测得分 </em>55% 。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我也是加把劲骑士！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Datawhale" scheme="https://superlova.github.io/tags/Datawhale/"/>
    
      <category term="Data Mining" scheme="https://superlova.github.io/tags/Data-Mining/"/>
    
      <category term="Time Series Analysis" scheme="https://superlova.github.io/tags/Time-Series-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>【学习笔记】Fuzzing学习笔记3——灰盒Fuzzing</title>
    <link href="https://superlova.github.io/2020/08/20/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Fuzzing%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E2%80%94%E2%80%94%E7%81%B0%E7%9B%92Fuzzing/"/>
    <id>https://superlova.github.io/2020/08/20/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Fuzzing%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E2%80%94%E2%80%94%E7%81%B0%E7%9B%92Fuzzing/</id>
    <published>2020-08-19T17:01:27.000Z</published>
    <updated>2020-08-19T17:04:57.391Z</updated>
    
    <content type="html"><![CDATA[<p>灰盒变异的模糊测试。<br><a id="more"></a></p><p>普通fuzzing：从0开始构造测试用例<br>突变fuzzing：从seed开始构造测试用例<br>灰盒fuzzing：有引导的突变fuzzing</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>上回书说到，AFL是突变fuzzer，通过把种子字符串进行些微修改，得到变异体；此外AFL还会将一个种子的前半部分与另一个种子的后半部分连接，形成变异体。</p><p>AFL也是个灰盒fuzzer，这是由于AFL需要使用程序内部信息（即覆盖率）。AFL不是白盒，因为AFL没有对程序进行约束求解、程序分析之类的，只是简单获取了一个覆盖率。如果生成的样本能够提升覆盖率，那么就将这个样本添加进种子队列以供下次突变使用（这就意味着突变体有重复突变的可能）。</p><p>AFL计算覆盖率的方法，是通过在每个分支的跳转指令后执行一段标记代码。这样就可以做到，监控每个输入导致的激活分支，以及每个分支被激活的大概频率。注入代码这个环节通常在编译时完成。对于Python，可以在未经处理的情况下执行覆盖率信息收集。</p><h2 id="突变算法和种子"><a href="#突变算法和种子" class="headerlink" title="突变算法和种子"></a>突变算法和种子</h2><p>引入Mutator类。Mutator类是个过程类，包装了对输入inp的突变方法。</p><pre><code class="lang-py">class Mutator(object):    def __init__(self):        self.mutators = [            self.delete_random_character,            self.insert_random_character,            self.flip_random_character    def insert_random_character(self,s):        &quot;&quot;&quot;Returns s with a random character inserted&quot;&quot;&quot;        pos = random.randint(0, len(s))        random_character = chr(random.randrange(32, 127))        return s[:pos] + random_character + s[pos:]    def delete_random_character(self,s):        &quot;&quot;&quot;Returns s with a random character deleted&quot;&quot;&quot;        if s == &quot;&quot;:            return self.insert_random_character(s)        pos = random.randint(0, len(s) - 1)        return s[:pos] + s[pos + 1:]    def flip_random_character(self,s):        &quot;&quot;&quot;Returns s with a random bit flipped in a random position&quot;&quot;&quot;        if s == &quot;&quot;:            return self.insert_random_character(s)        pos = random.randint(0, len(s) - 1)        c = s[pos]        bit = 1 &lt;&lt; random.randint(0, 6)        new_c = chr(ord(c) ^ bit)        return s[:pos] + new_c + s[pos + 1:]    def mutate(self, inp):        &quot;&quot;&quot;Return s with a random mutation applied&quot;&quot;&quot;        mutator = random.choice(self.mutators)        return mutator(inp)</code></pre><p>使用Mutator是只需实例化Mutator，然后调用mutate()方法即可。</p><pre><code class="lang-py">Mutator().mutate(&quot;good&quot;)&#39;cood&#39;</code></pre><h2 id="精力分配（Power-Schedule）"><a href="#精力分配（Power-Schedule）" class="headerlink" title="精力分配（Power Schedule）"></a>精力分配（Power Schedule）</h2><p>模糊测试是一种执行很慢的测试方法。既然并不是每个测试用例种子都值得分配同样的精力，那么试图发现那些更令人感兴趣的种子就是理所当然的选择了。</p><p>我们把一个种子从种群中被选中的可能性称为种子的能量（energy）。我们希望优先突变和执行那些更有希望发现待测程序错误的种子，不希望在无进步的种子身上浪费精力。</p><p>决定种子能量分配的算法称为“功率表”（Power Schedule）。AFL的功率表会将更多的能量分配给那些长度较短、执行速度较快、覆盖率增加较多的种子。</p><p>由此，每个种子需要额外维护其能量。构建Seed类如下：</p><pre><code class="lang-py">class Seed(object):        def __init__(self, data):        &quot;&quot;&quot;Set seed data&quot;&quot;&quot;        self.data = data    def __str__(self):        &quot;&quot;&quot;Returns data as string representation of the seed&quot;&quot;&quot;        return self.data    __repr__ = __str__</code></pre><p>下面是功率表PowerSchedule类的定义：</p><pre><code class="lang-py">class PowerSchedule(object):        def assignEnergy(self, population):        &quot;&quot;&quot;Assigns each seed the same energy&quot;&quot;&quot;        for seed in population:            seed.energy = 1    def normalizedEnergy(self, population):        &quot;&quot;&quot;Normalize energy&quot;&quot;&quot;        energy = list(map(lambda seed: seed.energy, population))        sum_energy = sum(energy)  # Add up all values in energy        norm_energy = list(map(lambda nrg: nrg/sum_energy, energy))        return norm_energy    def choose(self, population):        &quot;&quot;&quot;Choose weighted by normalized energy.&quot;&quot;&quot;        import numpy as np        self.assignEnergy(population)        norm_energy = self.normalizedEnergy(population)        seed = np.random.choice(population, p=norm_energy)        return seed</code></pre><h2 id="灰盒fuzzing与黑盒fuzzing的比较"><a href="#灰盒fuzzing与黑盒fuzzing的比较" class="headerlink" title="灰盒fuzzing与黑盒fuzzing的比较"></a>灰盒fuzzing与黑盒fuzzing的比较</h2><p>首先定义不使用coverage的黑盒fuzzer，MutationFuzzer 类：</p><pre><code class="lang-py">class MutationFuzzer(Fuzzer):    def __init__(self, seeds, mutator, schedule):        self.seeds = seeds        self.mutator = mutator        self.schedule = schedule        self.inputs = []        self.reset()    def reset(self):        &quot;&quot;&quot;Reset the initial population and seed index&quot;&quot;&quot;        self.population = list(map(lambda x: Seed(x), self.seeds))        self.seed_index = 0    def create_candidate(self):        &quot;&quot;&quot;Returns an input generated by fuzzing a seed in the population&quot;&quot;&quot;        seed = self.schedule.choose(self.population)        # Stacking: Apply multiple mutations to generate the candidate        candidate = seed.data        trials = min(len(candidate), 1 &lt;&lt; random.randint(1,5))        for i in range(trials):            candidate = self.mutator.mutate(candidate)        return candidate    def fuzz(self):        &quot;&quot;&quot;Returns first each seed once and then generates new inputs&quot;&quot;&quot;        if self.seed_index &lt; len(self.seeds):            # Still seeding            self.inp = self.seeds[self.seed_index]            self.seed_index += 1        else:            # Mutating            self.inp = self.create_candidate()        self.inputs.append(self.inp)        return self.inp</code></pre><p>MutationFuzzer 是由一组初始种子、一个突变器和一个功率表构成的。在整个模糊化过程中，它维护着一个名为population的种子语料库。create_candidate对某个种子执行多次突变，fuzz先试图返回正常种子，随后返回突变种子。</p><p>population_coverage 是预先定义好的覆盖率计算库，返回（all_coverage，cumulative_coverage）。其中all_coverage是所有输入所覆盖的语句集，cumulative_coverage是随着执行输入数量的增加而覆盖的语句数量。</p><p>下面是GrayBox fuzzing的实现：</p><pre><code class="lang-py">class GreyboxFuzzer(MutationFuzzer):        def reset(self):        &quot;&quot;&quot;Reset the initial population, seed index, coverage information&quot;&quot;&quot;        super().reset()        self.coverages_seen = set()        self.population = [] # population is filled during greybox fuzzing    def run(self, runner):        &quot;&quot;&quot;Run function(inp) while tracking coverage.           If we reach new coverage,           add inp to population and its coverage to population_coverage        &quot;&quot;&quot;        result, outcome = super().run(runner)        new_coverage = frozenset(runner.coverage())        if new_coverage not in self.coverages_seen:            # We have new coverage            seed = Seed(self.inp)            seed.coverage = runner.coverage()            self.coverages_seen.add(new_coverage)            self.population.append(seed)        return (result, outcome)</code></pre><p>经过计算，分别得到覆盖率变化趋势blackbox_coverage和greybox_coverage，可视化如下：</p><p><img src="/2020/08/20/【学习笔记】Fuzzing学习笔记3——灰盒Fuzzing/2020-08-20-00-42-27.png" srcset="/img/loading.gif" alt></p><p>可以看到，灰盒fuzzing的覆盖率增长明显比黑盒要好。</p><h2 id="增强后的灰盒fuzzer"><a href="#增强后的灰盒fuzzer" class="headerlink" title="增强后的灰盒fuzzer"></a>增强后的灰盒fuzzer</h2><p>通过修改功率表PowerSchedule，使那些能激活不寻常的path的input具有更高的energy。不寻常的path指的是激活次数比较小。</p><p>有多种方法计算一个种子的能量。上述的要求形式化为具体定义即为</p><script type="math/tex; mode=display">e(s)=\frac{1}{f(p(s))^a}</script><p>其中$s$是种子<br>$p(s)$为$s$激活的path<br>$f(p)$返回path激活的次数<br>$a$是给定的超参数<br>$e(s)$是种子$s$被分配的能量</p><p>下面是按照此思想设置的PowerSchedule：</p><pre><code class="lang-py">class AFLFastSchedule(PowerSchedule):     def __init__(self, exponent):        self.exponent = exponent    def assignEnergy(self, population):        &quot;&quot;&quot;Assign exponential energy inversely proportional to path frequency&quot;&quot;&quot;        for seed in population:            seed.energy = 1 / (self.path_frequency[getPathID(seed.coverage)] ** self.exponent)</code></pre><p>改进的灰盒Fuzzer：</p><pre><code class="lang-py">class CountingGreyboxFuzzer(GreyboxFuzzer):    def reset(self):        &quot;&quot;&quot;Reset path frequency&quot;&quot;&quot;        super().reset()        self.schedule.path_frequency = {}    def run(self, runner):        &quot;&quot;&quot;Inform scheduler about path frequency&quot;&quot;&quot;        result, outcome = super().run(runner)        path_id = getPathID(runner.coverage())        if not path_id in self.schedule.path_frequency:            self.schedule.path_frequency[path_id] = 1        else:            self.schedule.path_frequency[path_id] += 1        return(result, outcome)</code></pre><p>覆盖率变化如图所示</p><p><img src="/2020/08/20/【学习笔记】Fuzzing学习笔记3——灰盒Fuzzing/2020-08-20-00-52-08.png" srcset="/img/loading.gif" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>三篇Fuzzing文章到此为止。</p><p>Fuzzing 的方法是通过大量生成input，来找出被测程序的错误的方法。</p><p>Fuzzing的关键点之一在于input生成方法，其二在于input的排序方法，其三在于软件内部信息的获取和应用。</p><p>如果input完全是自己构建的，那么这种方法称之为generational fuzzing</p><p>如果input是通过原始种子略微修改后得到的，那么这种fuzzing为Mutational fuzzing。</p><p>如果Mutator可以经过一定的程序信息的引导，那么这叫做GrayBox Fuzzing，比如覆盖率引导的模糊测试</p><p>如果Seed经过Power Schedule的精力分配，随后Mutator根据Seed的精力大小排序，那么这种方法称之为Boosted GrayBox Fuzzing</p><p>使用到的类：</p><p>Runner：待测程序的基类</p><p>Fuzzer：模糊测试器的基类</p><p>Seed：测试用例种子的基类</p><p>PowerSchedule：功率表的基类</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;灰盒变异的模糊测试。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="notes" scheme="https://superlova.github.io/categories/notes/"/>
    
    
      <category term="Fuzzing" scheme="https://superlova.github.io/tags/Fuzzing/"/>
    
      <category term="Testing" scheme="https://superlova.github.io/tags/Testing/"/>
    
  </entry>
  
</feed>
